{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# DevOps Leadership Transition Plan - 90 Day Tracker\n\n## Overview\n\nThis is a comprehensive web application designed to help DevOps professionals transition from Senior Engineer to Team Lead roles over a 90-day period. The application provides structured tracking and management tools for the three-phase development plan: Foundation Building (Days 1-30), Leadership Development (Days 31-60), and Excellence & Optimization (Days 61-90).\n\nThe platform offers task management, team assessment tools, learning resource tracking, KPI metrics monitoring, weekly self-assessments, and risk mitigation planning. Users can monitor their progress through interactive dashboards, manage team member relationships, and track key performance indicators that demonstrate leadership effectiveness.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using **React 18** with **TypeScript** and leverages modern React patterns including hooks and functional components. The UI is constructed with **shadcn/ui** components built on top of **Radix UI primitives**, providing accessible and customizable interface elements. **Tailwind CSS** handles styling with a comprehensive design system using CSS variables for theming.\n\nNavigation is managed through **wouter** for client-side routing, providing a lightweight alternative to React Router. State management utilizes **TanStack Query** (React Query) for server state management, caching, and synchronization, eliminating the need for global state management libraries.\n\nForm handling is implemented with **react-hook-form** combined with **Zod** for validation through **@hookform/resolvers**. This approach provides type-safe form validation with excellent developer experience.\n\n### Backend Architecture\nThe server runs on **Node.js** with **Express.js** providing the REST API foundation. The application uses **TypeScript** throughout for type safety and better development experience. The build system combines **Vite** for frontend bundling and **esbuild** for server-side compilation.\n\nAPI routes follow RESTful conventions and are organized by resource types (tasks, team members, learning resources, KPI metrics, assessments, risks, and activities). Each route includes proper error handling and authentication middleware.\n\n### Database Design\nThe application uses **PostgreSQL** as the primary database with **Drizzle ORM** for type-safe database operations. The database schema includes tables for user management, session storage, and all business entities (tasks, team members, learning resources, metrics, assessments, risks, activities, and phases).\n\nDatabase connections are managed through **@neondatabase/serverless** with connection pooling for optimal performance. Migrations are handled through Drizzle Kit with schema definitions centralized in the shared directory.\n\n### Authentication System\nAuthentication is implemented using **Replit's OpenID Connect (OIDC)** provider with **passport.js** for session management. User sessions are stored in PostgreSQL using **connect-pg-simple** for persistent session storage.\n\nThe system includes middleware for protecting routes and automatic session refresh. User profiles include basic information (email, name, profile image) synchronized from the OIDC provider.\n\n### Data Architecture\nThe application follows a three-phase structure reflecting the 90-day transition plan:\n- Phase 1: Foundation Building (Days 1-30)\n- Phase 2: Leadership Development (Days 31-60) \n- Phase 3: Excellence & Optimization (Days 61-90)\n\nCore entities include tasks with priority and status tracking, team members with assessment data, learning resources with progress tracking, KPI metrics with historical data, weekly assessments for self-reflection, and risk management with mitigation plans.\n\n### File Structure\nThe project uses a monorepo structure with clear separation between client, server, and shared code. Path aliases are configured for clean imports, and the shared directory contains common types, schemas, and validation logic used by both client and server.\n\n## External Dependencies\n\n### Core Technologies\n- **React 18** with TypeScript for the frontend framework\n- **Express.js** with Node.js for the backend API server\n- **PostgreSQL** with Drizzle ORM for data persistence\n- **Neon Database** (@neondatabase/serverless) for serverless PostgreSQL hosting\n\n### UI and Styling\n- **shadcn/ui** component library built on Radix UI primitives\n- **Tailwind CSS** for utility-first styling with custom design tokens\n- **Radix UI** for accessible, unstyled UI primitives\n- **Lucide React** and **Font Awesome** for iconography\n\n### Development and Build Tools\n- **Vite** for frontend build tooling and development server\n- **esbuild** for fast server-side TypeScript compilation\n- **TypeScript** for static type checking across the entire codebase\n- **Drizzle Kit** for database schema management and migrations\n\n### Authentication and Session Management\n- **Replit Auth** with OpenID Connect for user authentication\n- **Passport.js** for authentication middleware and strategy management\n- **express-session** with PostgreSQL storage for session persistence\n\n### Form Handling and Validation\n- **react-hook-form** for performant form management\n- **Zod** with @hookform/resolvers for schema validation\n- **@tanstack/react-query** for server state management and caching\n\n### Optional File Upload (Configured but Not Required)\n- **Google Cloud Storage** (@google-cloud/storage) for file storage\n- **Uppy** components for file upload UI (dashboard, drag-drop, progress tracking)\n- **AWS S3** integration through Uppy for alternative cloud storage\n\n### Development Environment\n- **Replit-specific** plugins for development environment integration\n- **WebSocket** support (ws) for real-time features\n- **PostCSS** with Autoprefixer for CSS processing","size_bytes":5936},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/README_MPCheck_1756000915337.md":{"content":"# Multipoint Checklist Management System\n\nA modern, responsive web application for managing multiple checklists with full CRUD operations, built with React, TypeScript, and Material UI.\n\n## 🚀 Features\n\n### Core Functionality\n- **✅ Checklist Management**: Create, read, update, delete, and rename checklists\n- **📝 Item Management**: Add, edit, remove, and reorder items within checklists\n- **🔄 Easy Switching**: Navigate between multiple checklists seamlessly\n- **💾 Local Storage**: Automatic data persistence without backend dependency\n- **📱 Responsive Design**: Works perfectly on desktop, tablet, and mobile devices\n\n### Advanced Features\n- **🎯 Priority System**: Assign low, medium, or high priority to items\n- **📊 Progress Tracking**: Visual progress bars and completion statistics\n- **🎨 Material Design**: Beautiful, modern UI with Material UI components\n- **⚡ Real-time Updates**: Instant UI updates with optimistic rendering\n- **🔍 Visual Indicators**: Clear status indicators for completed items\n- **📅 Timestamps**: Track when checklists and items were created\n\n## 🛠️ Technology Stack\n\n- **Frontend Framework**: React 18+ with TypeScript\n- **UI Library**: Material UI (MUI) v5\n- **Routing**: React Router DOM\n- **State Management**: React Context API with useReducer\n- **Build Tool**: Vite\n- **Styling**: Emotion (CSS-in-JS)\n- **Icons**: Material UI Icons\n- **Data Storage**: Browser Local Storage\n- **ID Generation**: UUID\n\n## 🏗️ Project Structure\n\n```\nsrc/\n├── components/\n│   ├── common/\n│   │   └── ConfirmDialog.tsx      # Reusable confirmation dialog\n│   ├── checklist/\n│   │   ├── ChecklistCard.tsx      # Individual checklist display\n│   │   ├── ChecklistForm.tsx      # Create/edit checklist form\n│   │   ├── ChecklistItem.tsx      # Individual checklist item\n│   │   └── ChecklistSelector.tsx  # Sidebar checklist navigation\n│   └── layout/\n│       └── MainLayout.tsx         # Main application layout\n├── contexts/\n│   └── ChecklistContext.tsx       # Global state management\n├── hooks/\n│   └── useLocalStorage.ts         # Local storage hook\n├── pages/\n│   └── Dashboard.tsx              # Main dashboard page\n├── types/\n│   └── checklist.ts               # TypeScript interfaces\n├── utils/\n│   ├── storage.ts                 # Storage utilities\n│   └── validation.ts              # Form validation\n├── theme/\n│   └── theme.ts                   # Material UI theme\n├── App.tsx                        # Root component\n└── main.tsx                       # Application entry point\n```\n\n## 🚦 Getting Started\n\n### Prerequisites\n- Node.js (v16 or higher)\n- npm or yarn package manager\n\n### Installation\n\n1. **Clone or download the project**\n   ```bash\n   cd MultiPtChecklistMSys\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n4. **Open your browser**\n   Navigate to `http://localhost:5173`\n\n### Build for Production\n\n```bash\nnpm run build\nnpm run preview\n```\n\n## 📖 Usage Guide\n\n### Creating Your First Checklist\n1. Click the \"New Checklist\" button in the sidebar\n2. Enter a name and optional description\n3. Click \"Create\" to save\n\n### Managing Checklist Items\n1. Select a checklist from the sidebar\n2. Click the \"+\" floating action button to add items\n3. Set priority levels (Low, Medium, High) as needed\n4. Check off items as you complete them\n5. Use the menu (⋮) on each item to edit or delete\n\n### Switching Between Checklists\n- Use the sidebar to navigate between different checklists\n- The active checklist is highlighted\n- Progress indicators show completion status\n\n### Editing Checklists\n1. Select a checklist\n2. Click the menu (⋮) in the header\n3. Choose \"Edit Checklist\" to modify name/description\n4. Choose \"Delete Checklist\" to remove (with confirmation)\n\n## 🎨 Design Features\n\n### Material Design Principles\n- **Clean Typography**: Roboto font family with proper hierarchy\n- **Consistent Spacing**: 8px grid system for perfect alignment\n- **Elevation & Shadows**: Subtle depth with hover effects\n- **Color System**: Primary blue theme with semantic colors\n- **Responsive Breakpoints**: Mobile-first responsive design\n\n### User Experience\n- **Intuitive Navigation**: Clear visual hierarchy and navigation patterns\n- **Immediate Feedback**: Loading states and success/error messages\n- **Accessibility**: Proper ARIA labels and keyboard navigation\n- **Performance**: Optimized rendering with minimal re-renders\n\n## 🔧 Development\n\n### Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run lint` - Run ESLint\n\n### Code Quality\n- **TypeScript**: Full type safety throughout the application\n- **ESLint**: Code linting with React and TypeScript rules\n- **Component Architecture**: Modular, reusable components\n- **State Management**: Centralized state with Context API\n- **Error Handling**: Comprehensive error boundaries and validation\n\n## 📊 Data Model\n\n### Checklist Structure\n```typescript\ninterface Checklist {\n  id: string;\n  name: string;\n  description?: string;\n  items: ChecklistItem[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n```\n\n### Item Structure\n```typescript\ninterface ChecklistItem {\n  id: string;\n  text: string;\n  completed: boolean;\n  priority?: 'low' | 'medium' | 'high';\n  createdAt: Date;\n}\n```\n\n## 🔮 Future Enhancements\n\n- **Backend Integration**: API for data persistence and sync\n- **User Authentication**: Multi-user support with accounts\n- **Collaboration**: Share checklists with team members\n- **Templates**: Pre-built checklist templates\n- **Categories**: Organize checklists by category/project\n- **Due Dates**: Add deadlines to checklist items\n- **Attachments**: Add files or images to items\n- **Export/Import**: Export to PDF, CSV, or other formats\n- **Mobile App**: React Native implementation\n- **Offline Support**: PWA with offline capabilities\n\n## 🤝 Contributing\n\nThis project follows standard React and TypeScript best practices. When contributing:\n\n1. Follow the existing code style and patterns\n2. Add TypeScript types for all new code\n3. Test your changes thoroughly\n4. Update documentation as needed\n\n## 📄 License\n\nThis project is open source and available under the MIT License.\n\n---\n\n**Built with ❤️ using React, TypeScript, and Material UI**\n","size_bytes":6572},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertTaskSchema,\n  insertTeamMemberSchema,\n  insertLearningResourceSchema,\n  insertKpiMetricSchema,\n  insertWeeklyAssessmentSchema,\n  insertRiskSchema,\n  insertFollowUpSchema,\n  insertChecklistSchema,\n  insertChecklistItemSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Demo user ID for non-authenticated usage\n  const DEMO_USER_ID = \"demo-user-1\";\n\n  // Create demo user if it doesn't exist\n  app.post('/api/init-demo', async (req, res) => {\n    try {\n      const existingUser = await storage.getUser(DEMO_USER_ID);\n      if (!existingUser) {\n        await storage.upsertUser({\n          id: DEMO_USER_ID,\n          email: \"demo@example.com\",\n          firstName: \"Demo\",\n          lastName: \"User\",\n        });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error initializing demo user:\", error);\n      res.status(500).json({ message: \"Failed to initialize demo user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', async (req, res) => {\n    try {\n      const stats = await storage.getUserDashboardStats(DEMO_USER_ID);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Task routes\n  app.get('/api/tasks', async (req, res) => {\n    try {\n      const tasks = await storage.getUserTasks(DEMO_USER_ID);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get('/api/tasks/upcoming', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const tasks = await storage.getUpcomingTasks(DEMO_USER_ID, limit);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching upcoming tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch upcoming tasks\" });\n    }\n  });\n\n  app.post('/api/tasks', async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(DEMO_USER_ID, taskData);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.put('/api/tasks/:id', async (req, res) => {\n    try {\n      const taskId = req.params.id;\n      const updates = insertTaskSchema.partial().parse(req.body);\n      \n      // Add completion timestamp if marking as completed\n      if (updates.status === 'completed' && !updates.completedAt) {\n        updates.completedAt = new Date();\n      }\n      \n      const task = await storage.updateTask(DEMO_USER_ID, taskId, updates);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete('/api/tasks/:id', async (req, res) => {\n    try {\n      const taskId = req.params.id;\n      await storage.deleteTask(DEMO_USER_ID, taskId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Team member routes\n  app.get('/api/team-members', async (req, res) => {\n    try {\n      const teamMembers = await storage.getUserTeamMembers(DEMO_USER_ID);\n      res.json(teamMembers);\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n      res.status(500).json({ message: \"Failed to fetch team members\" });\n    }\n  });\n\n  app.post('/api/team-members', async (req, res) => {\n    try {\n      const memberData = insertTeamMemberSchema.parse(req.body);\n      const member = await storage.createTeamMember(DEMO_USER_ID, memberData);\n      res.json(member);\n    } catch (error) {\n      console.error(\"Error creating team member:\", error);\n      res.status(500).json({ message: \"Failed to create team member\" });\n    }\n  });\n\n  app.put('/api/team-members/:id', async (req, res) => {\n    try {\n      const memberId = req.params.id;\n      const updates = insertTeamMemberSchema.partial().parse(req.body);\n      const member = await storage.updateTeamMember(DEMO_USER_ID, memberId, updates);\n      res.json(member);\n    } catch (error) {\n      console.error(\"Error updating team member:\", error);\n      res.status(500).json({ message: \"Failed to update team member\" });\n    }\n  });\n\n  // Learning resource routes\n  app.get('/api/learning-resources', async (req, res) => {\n    try {\n      const resources = await storage.getUserLearningResources(DEMO_USER_ID);\n      res.json(resources);\n    } catch (error) {\n      console.error(\"Error fetching learning resources:\", error);\n      res.status(500).json({ message: \"Failed to fetch learning resources\" });\n    }\n  });\n\n  app.post('/api/learning-resources', async (req, res) => {\n    try {\n      const resourceData = insertLearningResourceSchema.parse(req.body);\n      const resource = await storage.createLearningResource(DEMO_USER_ID, resourceData);\n      res.json(resource);\n    } catch (error) {\n      console.error(\"Error creating learning resource:\", error);\n      res.status(500).json({ message: \"Failed to create learning resource\" });\n    }\n  });\n\n  app.put('/api/learning-resources/:id', async (req, res) => {\n    try {\n      const resourceId = req.params.id;\n      const updates = insertLearningResourceSchema.partial().parse(req.body);\n      \n      // Add completion timestamp if marking as completed\n      if (updates.status === 'completed' && !updates.completedAt) {\n        updates.completedAt = new Date();\n      }\n      \n      const resource = await storage.updateLearningResource(DEMO_USER_ID, resourceId, updates);\n      res.json(resource);\n    } catch (error) {\n      console.error(\"Error updating learning resource:\", error);\n      res.status(500).json({ message: \"Failed to update learning resource\" });\n    }\n  });\n\n  // KPI metrics routes\n  app.get('/api/kpi-metrics', async (req, res) => {\n    try {\n      const metrics = await storage.getUserKpiMetrics(DEMO_USER_ID);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching KPI metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch KPI metrics\" });\n    }\n  });\n\n  app.post('/api/kpi-metrics', async (req, res) => {\n    try {\n      const metricData = insertKpiMetricSchema.parse(req.body);\n      const metric = await storage.createKpiMetric(DEMO_USER_ID, metricData);\n      res.json(metric);\n    } catch (error) {\n      console.error(\"Error creating KPI metric:\", error);\n      res.status(500).json({ message: \"Failed to create KPI metric\" });\n    }\n  });\n\n  // Weekly assessment routes\n  app.get('/api/weekly-assessments', async (req, res) => {\n    try {\n      const assessments = await storage.getUserWeeklyAssessments(DEMO_USER_ID);\n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Error fetching weekly assessments:\", error);\n      res.status(500).json({ message: \"Failed to fetch weekly assessments\" });\n    }\n  });\n\n  app.post('/api/weekly-assessments', async (req, res) => {\n    try {\n      const assessmentData = insertWeeklyAssessmentSchema.parse(req.body);\n      const assessment = await storage.createWeeklyAssessment(DEMO_USER_ID, assessmentData);\n      res.json(assessment);\n    } catch (error) {\n      console.error(\"Error creating weekly assessment:\", error);\n      res.status(500).json({ message: \"Failed to create weekly assessment\" });\n    }\n  });\n\n  // Risk routes\n  app.get('/api/risks', async (req, res) => {\n    try {\n      const risks = await storage.getUserRisks(DEMO_USER_ID);\n      res.json(risks);\n    } catch (error) {\n      console.error(\"Error fetching risks:\", error);\n      res.status(500).json({ message: \"Failed to fetch risks\" });\n    }\n  });\n\n  app.post('/api/risks', async (req, res) => {\n    try {\n      const riskData = insertRiskSchema.parse(req.body);\n      const risk = await storage.createRisk(DEMO_USER_ID, riskData);\n      res.json(risk);\n    } catch (error) {\n      console.error(\"Error creating risk:\", error);\n      res.status(500).json({ message: \"Failed to create risk\" });\n    }\n  });\n\n  app.put('/api/risks/:id', async (req, res) => {\n    try {\n      const riskId = req.params.id;\n      const updates = insertRiskSchema.partial().parse(req.body);\n      const risk = await storage.updateRisk(DEMO_USER_ID, riskId, updates);\n      res.json(risk);\n    } catch (error) {\n      console.error(\"Error updating risk:\", error);\n      res.status(500).json({ message: \"Failed to update risk\" });\n    }\n  });\n\n  // Activity routes\n  app.get('/api/activities', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 20;\n      const activities = await storage.getUserActivities(DEMO_USER_ID, limit);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Progress tracking routes\n  app.post('/api/progress/start', async (req, res) => {\n    try {\n      const { currentDay } = req.body;\n      await storage.updateUserProgress(DEMO_USER_ID, currentDay || 1);\n      res.json({ success: true, currentDay: currentDay || 1 });\n    } catch (error) {\n      console.error(\"Error starting progress:\", error);\n      res.status(500).json({ message: \"Failed to start progress tracking\" });\n    }\n  });\n\n  app.put('/api/progress/update', async (req, res) => {\n    try {\n      const { currentDay } = req.body;\n      await storage.updateUserProgress(DEMO_USER_ID, currentDay);\n      res.json({ success: true, currentDay });\n    } catch (error) {\n      console.error(\"Error updating progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Follow-up routes\n  app.get('/api/follow-ups', async (req, res) => {\n    try {\n      const followUps = await storage.getUserFollowUps(DEMO_USER_ID);\n      res.json(followUps);\n    } catch (error) {\n      console.error(\"Error fetching follow-ups:\", error);\n      res.status(500).json({ message: \"Failed to fetch follow-ups\" });\n    }\n  });\n\n  app.post('/api/follow-ups', async (req, res) => {\n    try {\n      const followUpData = insertFollowUpSchema.parse(req.body);\n      const followUp = await storage.createFollowUp(DEMO_USER_ID, followUpData);\n      res.json(followUp);\n    } catch (error) {\n      console.error(\"Error creating follow-up:\", error);\n      res.status(500).json({ message: \"Failed to create follow-up\" });\n    }\n  });\n\n  app.put('/api/follow-ups/:id', async (req, res) => {\n    try {\n      const followUpId = req.params.id;\n      const updates = insertFollowUpSchema.partial().parse(req.body);\n      const followUp = await storage.updateFollowUp(DEMO_USER_ID, followUpId, updates);\n      res.json(followUp);\n    } catch (error) {\n      console.error(\"Error updating follow-up:\", error);\n      res.status(500).json({ message: \"Failed to update follow-up\" });\n    }\n  });\n\n  app.delete('/api/follow-ups/:id', async (req, res) => {\n    try {\n      const followUpId = req.params.id;\n      await storage.deleteFollowUp(DEMO_USER_ID, followUpId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting follow-up:\", error);\n      res.status(500).json({ message: \"Failed to delete follow-up\" });\n    }\n  });\n\n  // Checklist routes\n  app.get('/api/checklists', async (req, res) => {\n    try {\n      const checklists = await storage.getUserChecklists(DEMO_USER_ID);\n      res.json(checklists);\n    } catch (error) {\n      console.error(\"Error fetching checklists:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklists\" });\n    }\n  });\n\n  app.post('/api/checklists', async (req, res) => {\n    try {\n      const checklistData = insertChecklistSchema.parse(req.body);\n      const checklist = await storage.createChecklist(DEMO_USER_ID, checklistData);\n      res.json(checklist);\n    } catch (error) {\n      console.error(\"Error creating checklist:\", error);\n      res.status(500).json({ message: \"Failed to create checklist\" });\n    }\n  });\n\n  app.put('/api/checklists/:id', async (req, res) => {\n    try {\n      const checklistId = req.params.id;\n      const updates = insertChecklistSchema.partial().parse(req.body);\n      const checklist = await storage.updateChecklist(DEMO_USER_ID, checklistId, updates);\n      res.json(checklist);\n    } catch (error) {\n      console.error(\"Error updating checklist:\", error);\n      res.status(500).json({ message: \"Failed to update checklist\" });\n    }\n  });\n\n  app.delete('/api/checklists/:id', async (req, res) => {\n    try {\n      const checklistId = req.params.id;\n      await storage.deleteChecklist(DEMO_USER_ID, checklistId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting checklist:\", error);\n      res.status(500).json({ message: \"Failed to delete checklist\" });\n    }\n  });\n\n  // Checklist item routes\n  app.get('/api/checklists/:id/items', async (req, res) => {\n    try {\n      const checklistId = req.params.id;\n      const items = await storage.getChecklistItems(checklistId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching checklist items:\", error);\n      res.status(500).json({ message: \"Failed to fetch checklist items\" });\n    }\n  });\n\n  app.post('/api/checklists/:id/items', async (req, res) => {\n    try {\n      const checklistId = req.params.id;\n      const itemData = insertChecklistItemSchema.parse(req.body);\n      const item = await storage.createChecklistItem(checklistId, itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating checklist item:\", error);\n      res.status(500).json({ message: \"Failed to create checklist item\" });\n    }\n  });\n\n  app.put('/api/checklist-items/:id', async (req, res) => {\n    try {\n      const itemId = req.params.id;\n      const updates = insertChecklistItemSchema.partial().parse(req.body);\n      const item = await storage.updateChecklistItem(itemId, updates);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating checklist item:\", error);\n      res.status(500).json({ message: \"Failed to update checklist item\" });\n    }\n  });\n\n  app.delete('/api/checklist-items/:id', async (req, res) => {\n    try {\n      const itemId = req.params.id;\n      await storage.deleteChecklistItem(itemId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting checklist item:\", error);\n      res.status(500).json({ message: \"Failed to delete checklist item\" });\n    }\n  });\n\n  app.put('/api/checklists/:id/items/reorder', async (req, res) => {\n    try {\n      const checklistId = req.params.id;\n      const { itemOrders } = req.body;\n      await storage.reorderChecklistItems(checklistId, itemOrders);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error reordering checklist items:\", error);\n      res.status(500).json({ message: \"Failed to reorder checklist items\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15405},"server/storage.ts":{"content":"import {\n  users,\n  tasks,\n  teamMembers,\n  learningResources,\n  kpiMetrics,\n  weeklyAssessments,\n  risks,\n  activities,\n  phases,\n  followUps,\n  checklists,\n  checklistItems,\n  type User,\n  type InsertUser,\n  type Task,\n  type InsertTask,\n  type TeamMember,\n  type InsertTeamMember,\n  type LearningResource,\n  type InsertLearningResource,\n  type KpiMetric,\n  type InsertKpiMetric,\n  type WeeklyAssessment,\n  type InsertWeeklyAssessment,\n  type Risk,\n  type InsertRisk,\n  type Activity,\n  type InsertActivity,\n  type Phase,\n  type FollowUp,\n  type InsertFollowUp,\n  type Checklist,\n  type InsertChecklist,\n  type ChecklistItem,\n  type InsertChecklistItem,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: InsertUser): Promise<User>;\n  \n  // Phase operations\n  getPhases(): Promise<Phase[]>;\n  \n  // Task operations\n  getUserTasks(userId: string): Promise<Task[]>;\n  getTasksByPhase(userId: string, phaseId: string): Promise<Task[]>;\n  getTaskById(userId: string, taskId: string): Promise<Task | undefined>;\n  createTask(userId: string, task: InsertTask): Promise<Task>;\n  updateTask(userId: string, taskId: string, updates: Partial<InsertTask>): Promise<Task>;\n  deleteTask(userId: string, taskId: string): Promise<void>;\n  getUpcomingTasks(userId: string, limit?: number): Promise<Task[]>;\n  \n  // Team member operations\n  getUserTeamMembers(userId: string): Promise<TeamMember[]>;\n  getTeamMemberById(userId: string, memberId: string): Promise<TeamMember | undefined>;\n  createTeamMember(userId: string, member: InsertTeamMember): Promise<TeamMember>;\n  updateTeamMember(userId: string, memberId: string, updates: Partial<InsertTeamMember>): Promise<TeamMember>;\n  deleteTeamMember(userId: string, memberId: string): Promise<void>;\n  \n  // Learning resource operations\n  getUserLearningResources(userId: string): Promise<LearningResource[]>;\n  getLearningResourceById(userId: string, resourceId: string): Promise<LearningResource | undefined>;\n  createLearningResource(userId: string, resource: InsertLearningResource): Promise<LearningResource>;\n  updateLearningResource(userId: string, resourceId: string, updates: Partial<InsertLearningResource>): Promise<LearningResource>;\n  deleteLearningResource(userId: string, resourceId: string): Promise<void>;\n  \n  // KPI metrics operations\n  getUserKpiMetrics(userId: string): Promise<KpiMetric[]>;\n  getKpiMetricsByType(userId: string, metricType: string): Promise<KpiMetric[]>;\n  createKpiMetric(userId: string, metric: InsertKpiMetric): Promise<KpiMetric>;\n  \n  // Weekly assessment operations\n  getUserWeeklyAssessments(userId: string): Promise<WeeklyAssessment[]>;\n  getWeeklyAssessmentById(userId: string, assessmentId: string): Promise<WeeklyAssessment | undefined>;\n  createWeeklyAssessment(userId: string, assessment: InsertWeeklyAssessment): Promise<WeeklyAssessment>;\n  updateWeeklyAssessment(userId: string, assessmentId: string, updates: Partial<InsertWeeklyAssessment>): Promise<WeeklyAssessment>;\n  \n  // Risk operations\n  getUserRisks(userId: string): Promise<Risk[]>;\n  getRiskById(userId: string, riskId: string): Promise<Risk | undefined>;\n  createRisk(userId: string, risk: InsertRisk): Promise<Risk>;\n  updateRisk(userId: string, riskId: string, updates: Partial<InsertRisk>): Promise<Risk>;\n  deleteRisk(userId: string, riskId: string): Promise<void>;\n  \n  // Activity operations\n  getUserActivities(userId: string, limit?: number): Promise<Activity[]>;\n  createActivity(userId: string, activity: InsertActivity): Promise<Activity>;\n  \n  // Follow-up operations\n  getUserFollowUps(userId: string): Promise<FollowUp[]>;\n  getFollowUpById(userId: string, followUpId: string): Promise<FollowUp | undefined>;\n  createFollowUp(userId: string, followUp: InsertFollowUp): Promise<FollowUp>;\n  updateFollowUp(userId: string, followUpId: string, updates: Partial<InsertFollowUp>): Promise<FollowUp>;\n  deleteFollowUp(userId: string, followUpId: string): Promise<void>;\n  \n  // Checklist operations\n  getUserChecklists(userId: string): Promise<Checklist[]>;\n  getChecklistById(userId: string, checklistId: string): Promise<Checklist | undefined>;\n  createChecklist(userId: string, checklist: InsertChecklist): Promise<Checklist>;\n  updateChecklist(userId: string, checklistId: string, updates: Partial<InsertChecklist>): Promise<Checklist>;\n  deleteChecklist(userId: string, checklistId: string): Promise<void>;\n  \n  // Checklist item operations\n  getChecklistItems(checklistId: string): Promise<ChecklistItem[]>;\n  createChecklistItem(checklistId: string, item: InsertChecklistItem): Promise<ChecklistItem>;\n  updateChecklistItem(itemId: string, updates: Partial<InsertChecklistItem>): Promise<ChecklistItem>;\n  deleteChecklistItem(itemId: string): Promise<void>;\n  reorderChecklistItems(checklistId: string, itemOrders: Array<{id: string, order: number}>): Promise<void>;\n  \n  // Progress tracking\n  updateUserProgress(userId: string, currentDay: number): Promise<void>;\n  getUserProgress(userId: string): Promise<number>;\n  \n  // Dashboard statistics\n  getUserDashboardStats(userId: string): Promise<{\n    overallProgress: number;\n    tasksCompleted: number;\n    totalTasks: number;\n    currentPhase: Phase | null;\n    teamSatisfactionAvg: number;\n    learningProgress: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: userData,\n      })\n      .returning();\n    return user;\n  }\n\n  // Phase operations\n  async getPhases(): Promise<Phase[]> {\n    return await db.select().from(phases).orderBy(phases.orderIndex);\n  }\n\n  // Task operations\n  async getUserTasks(userId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByPhase(userId: string, phaseId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(and(eq(tasks.userId, userId), eq(tasks.phaseId, phaseId)))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTaskById(userId: string, taskId: string): Promise<Task | undefined> {\n    const [task] = await db\n      .select()\n      .from(tasks)\n      .where(and(eq(tasks.userId, userId), eq(tasks.id, taskId)));\n    return task;\n  }\n\n  async createTask(userId: string, task: InsertTask): Promise<Task> {\n    const [newTask] = await db\n      .insert(tasks)\n      .values({ ...task, userId })\n      .returning();\n    \n    // Create activity log\n    await this.createActivity(userId, {\n      type: \"task_created\",\n      description: `Created task: ${newTask.title}`,\n      entityId: newTask.id,\n      entityType: \"task\",\n    });\n    \n    return newTask;\n  }\n\n  async updateTask(userId: string, taskId: string, updates: Partial<InsertTask>): Promise<Task> {\n    const [updatedTask] = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(tasks.userId, userId), eq(tasks.id, taskId)))\n      .returning();\n    \n    // Create activity log for completion\n    if (updates.status === \"completed\" && updates.completedAt) {\n      await this.createActivity(userId, {\n        type: \"task_completed\",\n        description: `Completed task: ${updatedTask.title}`,\n        entityId: updatedTask.id,\n        entityType: \"task\",\n      });\n    }\n    \n    return updatedTask;\n  }\n\n  async deleteTask(userId: string, taskId: string): Promise<void> {\n    await db\n      .delete(tasks)\n      .where(and(eq(tasks.userId, userId), eq(tasks.id, taskId)));\n  }\n\n  async getUpcomingTasks(userId: string, limit: number = 10): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(and(\n        eq(tasks.userId, userId),\n        eq(tasks.status, \"pending\")\n      ))\n      .orderBy(tasks.dueDate, tasks.priority)\n      .limit(limit);\n  }\n\n  // Team member operations\n  async getUserTeamMembers(userId: string): Promise<TeamMember[]> {\n    return await db\n      .select()\n      .from(teamMembers)\n      .where(eq(teamMembers.userId, userId))\n      .orderBy(teamMembers.name);\n  }\n\n  async getTeamMemberById(userId: string, memberId: string): Promise<TeamMember | undefined> {\n    const [member] = await db\n      .select()\n      .from(teamMembers)\n      .where(and(eq(teamMembers.userId, userId), eq(teamMembers.id, memberId)));\n    return member;\n  }\n\n  async createTeamMember(userId: string, member: InsertTeamMember): Promise<TeamMember> {\n    const [newMember] = await db\n      .insert(teamMembers)\n      .values({ ...member, userId })\n      .returning();\n    \n    await this.createActivity(userId, {\n      type: \"team_member_added\",\n      description: `Added team member: ${newMember.name}`,\n      entityId: newMember.id,\n      entityType: \"team_member\",\n    });\n    \n    return newMember;\n  }\n\n  async updateTeamMember(userId: string, memberId: string, updates: Partial<InsertTeamMember>): Promise<TeamMember> {\n    const [updatedMember] = await db\n      .update(teamMembers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(teamMembers.userId, userId), eq(teamMembers.id, memberId)))\n      .returning();\n    return updatedMember;\n  }\n\n  async deleteTeamMember(userId: string, memberId: string): Promise<void> {\n    await db\n      .delete(teamMembers)\n      .where(and(eq(teamMembers.userId, userId), eq(teamMembers.id, memberId)));\n  }\n\n  // Learning resource operations\n  async getUserLearningResources(userId: string): Promise<LearningResource[]> {\n    return await db\n      .select()\n      .from(learningResources)\n      .where(eq(learningResources.userId, userId))\n      .orderBy(desc(learningResources.createdAt));\n  }\n\n  async getLearningResourceById(userId: string, resourceId: string): Promise<LearningResource | undefined> {\n    const [resource] = await db\n      .select()\n      .from(learningResources)\n      .where(and(eq(learningResources.userId, userId), eq(learningResources.id, resourceId)));\n    return resource;\n  }\n\n  async createLearningResource(userId: string, resource: InsertLearningResource): Promise<LearningResource> {\n    const [newResource] = await db\n      .insert(learningResources)\n      .values({ ...resource, userId })\n      .returning();\n    \n    await this.createActivity(userId, {\n      type: \"learning_resource_added\",\n      description: `Added learning resource: ${newResource.title}`,\n      entityId: newResource.id,\n      entityType: \"learning_resource\",\n    });\n    \n    return newResource;\n  }\n\n  async updateLearningResource(userId: string, resourceId: string, updates: Partial<InsertLearningResource>): Promise<LearningResource> {\n    const [updatedResource] = await db\n      .update(learningResources)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(learningResources.userId, userId), eq(learningResources.id, resourceId)))\n      .returning();\n    \n    // Log completion\n    if (updates.status === \"completed\" && updates.completedAt) {\n      await this.createActivity(userId, {\n        type: \"learning_completed\",\n        description: `Completed learning resource: ${updatedResource.title}`,\n        entityId: updatedResource.id,\n        entityType: \"learning_resource\",\n      });\n    }\n    \n    return updatedResource;\n  }\n\n  async deleteLearningResource(userId: string, resourceId: string): Promise<void> {\n    await db\n      .delete(learningResources)\n      .where(and(eq(learningResources.userId, userId), eq(learningResources.id, resourceId)));\n  }\n\n  // KPI metrics operations\n  async getUserKpiMetrics(userId: string): Promise<KpiMetric[]> {\n    return await db\n      .select()\n      .from(kpiMetrics)\n      .where(eq(kpiMetrics.userId, userId))\n      .orderBy(desc(kpiMetrics.recordedAt));\n  }\n\n  async getKpiMetricsByType(userId: string, metricType: string): Promise<KpiMetric[]> {\n    return await db\n      .select()\n      .from(kpiMetrics)\n      .where(and(eq(kpiMetrics.userId, userId), eq(kpiMetrics.metricType, metricType)))\n      .orderBy(desc(kpiMetrics.recordedAt));\n  }\n\n  async createKpiMetric(userId: string, metric: InsertKpiMetric): Promise<KpiMetric> {\n    const [newMetric] = await db\n      .insert(kpiMetrics)\n      .values({ ...metric, userId })\n      .returning();\n    \n    await this.createActivity(userId, {\n      type: \"metric_recorded\",\n      description: `Recorded KPI metric: ${newMetric.metricType}`,\n      entityId: newMetric.id,\n      entityType: \"kpi_metric\",\n    });\n    \n    return newMetric;\n  }\n\n  // Weekly assessment operations\n  async getUserWeeklyAssessments(userId: string): Promise<WeeklyAssessment[]> {\n    return await db\n      .select()\n      .from(weeklyAssessments)\n      .where(eq(weeklyAssessments.userId, userId))\n      .orderBy(desc(weeklyAssessments.weekStartDate));\n  }\n\n  async getWeeklyAssessmentById(userId: string, assessmentId: string): Promise<WeeklyAssessment | undefined> {\n    const [assessment] = await db\n      .select()\n      .from(weeklyAssessments)\n      .where(and(eq(weeklyAssessments.userId, userId), eq(weeklyAssessments.id, assessmentId)));\n    return assessment;\n  }\n\n  async createWeeklyAssessment(userId: string, assessment: InsertWeeklyAssessment): Promise<WeeklyAssessment> {\n    const [newAssessment] = await db\n      .insert(weeklyAssessments)\n      .values({ ...assessment, userId })\n      .returning();\n    \n    await this.createActivity(userId, {\n      type: \"weekly_assessment\",\n      description: `Completed weekly self-assessment`,\n      entityId: newAssessment.id,\n      entityType: \"weekly_assessment\",\n    });\n    \n    return newAssessment;\n  }\n\n  async updateWeeklyAssessment(userId: string, assessmentId: string, updates: Partial<InsertWeeklyAssessment>): Promise<WeeklyAssessment> {\n    const [updatedAssessment] = await db\n      .update(weeklyAssessments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(weeklyAssessments.userId, userId), eq(weeklyAssessments.id, assessmentId)))\n      .returning();\n    return updatedAssessment;\n  }\n\n  // Risk operations\n  async getUserRisks(userId: string): Promise<Risk[]> {\n    return await db\n      .select()\n      .from(risks)\n      .where(eq(risks.userId, userId))\n      .orderBy(desc(risks.createdAt));\n  }\n\n  async getRiskById(userId: string, riskId: string): Promise<Risk | undefined> {\n    const [risk] = await db\n      .select()\n      .from(risks)\n      .where(and(eq(risks.userId, userId), eq(risks.id, riskId)));\n    return risk;\n  }\n\n  async createRisk(userId: string, risk: InsertRisk): Promise<Risk> {\n    const [newRisk] = await db\n      .insert(risks)\n      .values({ ...risk, userId })\n      .returning();\n    \n    await this.createActivity(userId, {\n      type: \"risk_identified\",\n      description: `Identified risk: ${newRisk.title}`,\n      entityId: newRisk.id,\n      entityType: \"risk\",\n    });\n    \n    return newRisk;\n  }\n\n  async updateRisk(userId: string, riskId: string, updates: Partial<InsertRisk>): Promise<Risk> {\n    const [updatedRisk] = await db\n      .update(risks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(risks.userId, userId), eq(risks.id, riskId)))\n      .returning();\n    return updatedRisk;\n  }\n\n  async deleteRisk(userId: string, riskId: string): Promise<void> {\n    await db\n      .delete(risks)\n      .where(and(eq(risks.userId, userId), eq(risks.id, riskId)));\n  }\n\n  // Activity operations\n  async getUserActivities(userId: string, limit: number = 20): Promise<Activity[]> {\n    return await db\n      .select()\n      .from(activities)\n      .where(eq(activities.userId, userId))\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n  }\n\n  async createActivity(userId: string, activity: InsertActivity): Promise<Activity> {\n    const [newActivity] = await db\n      .insert(activities)\n      .values({ ...activity, userId })\n      .returning();\n    return newActivity;\n  }\n\n  // Progress tracking operations\n  async updateUserProgress(userId: string, currentDay: number): Promise<void> {\n    // Store progress in an activity for tracking\n    await this.createActivity(userId, {\n      type: \"progress_updated\",\n      description: `Progress updated to day ${currentDay} (${Math.round((currentDay / 90) * 100)}%)`,\n      entityId: null,\n      entityType: \"progress\",\n    });\n  }\n\n  async getUserProgress(userId: string): Promise<number> {\n    return await this.getUserCurrentDay(userId);\n  }\n\n  async getUserCurrentDay(userId: string): Promise<number> {\n    // Calculate from recent activities\n    const recentProgressActivity = await db\n      .select()\n      .from(activities)\n      .where(and(eq(activities.userId, userId), eq(activities.type, \"progress_updated\")))\n      .orderBy(desc(activities.createdAt))\n      .limit(1);\n      \n    if (recentProgressActivity.length > 0) {\n      // Extract day from description (simple parsing)\n      const description = recentProgressActivity[0].description;\n      const dayMatch = description.match(/day (\\d+)/);\n      return dayMatch ? parseInt(dayMatch[1]) : 0;\n    }\n    \n    return 0;\n  }\n\n  // Follow-up operations\n  async getUserFollowUps(userId: string): Promise<FollowUp[]> {\n    return await db\n      .select()\n      .from(followUps)\n      .where(eq(followUps.userId, userId))\n      .orderBy(desc(followUps.dueDate));\n  }\n\n  async getFollowUpById(userId: string, followUpId: string): Promise<FollowUp | undefined> {\n    const [followUp] = await db\n      .select()\n      .from(followUps)\n      .where(and(eq(followUps.userId, userId), eq(followUps.id, followUpId)));\n    return followUp;\n  }\n\n  async createFollowUp(userId: string, followUp: InsertFollowUp): Promise<FollowUp> {\n    const [newFollowUp] = await db\n      .insert(followUps)\n      .values({ ...followUp, userId })\n      .returning();\n    \n    // Create activity log\n    await this.createActivity(userId, {\n      type: \"follow_up_created\",\n      description: `Created follow-up: ${newFollowUp.title}`,\n      entityId: newFollowUp.id,\n      entityType: \"follow_up\",\n    });\n    \n    return newFollowUp;\n  }\n\n  async updateFollowUp(userId: string, followUpId: string, updates: Partial<InsertFollowUp>): Promise<FollowUp> {\n    const [updatedFollowUp] = await db\n      .update(followUps)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(followUps.userId, userId), eq(followUps.id, followUpId)))\n      .returning();\n    \n    // Create activity log for status changes\n    if (updates.status === \"completed\") {\n      await this.createActivity(userId, {\n        type: \"follow_up_completed\",\n        description: `Completed follow-up: ${updatedFollowUp.title}`,\n        entityId: updatedFollowUp.id,\n        entityType: \"follow_up\",\n      });\n    }\n    \n    return updatedFollowUp;\n  }\n\n  async deleteFollowUp(userId: string, followUpId: string): Promise<void> {\n    await db\n      .delete(followUps)\n      .where(and(eq(followUps.userId, userId), eq(followUps.id, followUpId)));\n  }\n\n  // Checklist operations\n  async getUserChecklists(userId: string): Promise<Checklist[]> {\n    return await db\n      .select()\n      .from(checklists)\n      .where(eq(checklists.userId, userId))\n      .orderBy(desc(checklists.updatedAt));\n  }\n\n  async getChecklistById(userId: string, checklistId: string): Promise<Checklist | undefined> {\n    const [checklist] = await db\n      .select()\n      .from(checklists)\n      .where(and(eq(checklists.userId, userId), eq(checklists.id, checklistId)));\n    return checklist;\n  }\n\n  async createChecklist(userId: string, checklist: InsertChecklist): Promise<Checklist> {\n    const [newChecklist] = await db\n      .insert(checklists)\n      .values({ ...checklist, userId })\n      .returning();\n    \n    // Create activity log\n    await this.createActivity(userId, {\n      type: \"checklist_created\",\n      description: `Created checklist: ${newChecklist.name}`,\n      entityId: newChecklist.id,\n      entityType: \"checklist\",\n    });\n    \n    return newChecklist;\n  }\n\n  async updateChecklist(userId: string, checklistId: string, updates: Partial<InsertChecklist>): Promise<Checklist> {\n    const [updatedChecklist] = await db\n      .update(checklists)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(checklists.userId, userId), eq(checklists.id, checklistId)))\n      .returning();\n    \n    return updatedChecklist;\n  }\n\n  async deleteChecklist(userId: string, checklistId: string): Promise<void> {\n    await db\n      .delete(checklists)\n      .where(and(eq(checklists.userId, userId), eq(checklists.id, checklistId)));\n  }\n\n  // Checklist item operations\n  async getChecklistItems(checklistId: string): Promise<ChecklistItem[]> {\n    return await db\n      .select()\n      .from(checklistItems)\n      .where(eq(checklistItems.checklistId, checklistId))\n      .orderBy(checklistItems.order, checklistItems.createdAt);\n  }\n\n  async createChecklistItem(checklistId: string, item: InsertChecklistItem): Promise<ChecklistItem> {\n    // Get the next order value\n    const maxOrderResult = await db\n      .select({ maxOrder: sql<number>`COALESCE(MAX(${checklistItems.order}), -1)` })\n      .from(checklistItems)\n      .where(eq(checklistItems.checklistId, checklistId));\n    \n    const nextOrder = (maxOrderResult[0]?.maxOrder ?? -1) + 1;\n    \n    const [newItem] = await db\n      .insert(checklistItems)\n      .values({ \n        text: item.text,\n        completed: item.completed ?? false,\n        priority: (item.priority as \"low\" | \"medium\" | \"high\") ?? \"medium\",\n        order: nextOrder,\n        checklistId \n      })\n      .returning();\n    \n    return newItem;\n  }\n\n  async updateChecklistItem(itemId: string, updates: Partial<InsertChecklistItem>): Promise<ChecklistItem> {\n    const updateData: any = {};\n    if (updates.text !== undefined) updateData.text = updates.text;\n    if (updates.completed !== undefined) updateData.completed = updates.completed;\n    if (updates.priority !== undefined) updateData.priority = updates.priority;\n    if (updates.order !== undefined) updateData.order = updates.order;\n    \n    const [updatedItem] = await db\n      .update(checklistItems)\n      .set(updateData)\n      .where(eq(checklistItems.id, itemId))\n      .returning();\n    \n    return updatedItem;\n  }\n\n  async deleteChecklistItem(itemId: string): Promise<void> {\n    await db\n      .delete(checklistItems)\n      .where(eq(checklistItems.id, itemId));\n  }\n\n  async reorderChecklistItems(checklistId: string, itemOrders: Array<{id: string, order: number}>): Promise<void> {\n    // Update each item's order\n    for (const itemOrder of itemOrders) {\n      await db\n        .update(checklistItems)\n        .set({ order: itemOrder.order })\n        .where(and(\n          eq(checklistItems.id, itemOrder.id),\n          eq(checklistItems.checklistId, checklistId)\n        ));\n    }\n  }\n\n  // Dashboard statistics\n  async getUserDashboardStats(userId: string): Promise<{\n    overallProgress: number;\n    tasksCompleted: number;\n    totalTasks: number;\n    currentPhase: Phase | null;\n    teamSatisfactionAvg: number;\n    learningProgress: number;\n  }> {\n    // Get current day from progress tracking\n    const currentDay = await this.getUserCurrentDay(userId);\n    \n    // Get task statistics\n    const taskStats = await db\n      .select({\n        total: sql<number>`count(*)`,\n        completed: sql<number>`count(*) filter (where status = 'completed')`,\n      })\n      .from(tasks)\n      .where(eq(tasks.userId, userId));\n\n    // Get team satisfaction average\n    const teamSatStats = await db\n      .select({\n        avgSatisfaction: sql<number>`avg(satisfaction_score)`,\n      })\n      .from(teamMembers)\n      .where(eq(teamMembers.userId, userId));\n\n    // Get learning progress\n    const learningStats = await db\n      .select({\n        avgProgress: sql<number>`avg(progress)`,\n      })\n      .from(learningResources)\n      .where(eq(learningResources.userId, userId));\n\n    // Get current phase based on current day\n    const currentPhaseResult = await db\n      .select()\n      .from(phases)\n      .where(and(\n        lte(phases.startDay, currentDay),\n        gte(phases.endDay, currentDay)\n      ));\n\n    const stats = taskStats[0];\n    const overallProgress = Math.round((currentDay / 90) * 100);\n    const teamSatisfactionAvg = teamSatStats[0]?.avgSatisfaction || 0;\n    const learningProgress = learningStats[0]?.avgProgress || 0;\n\n    return {\n      overallProgress,\n      tasksCompleted: stats?.completed || 0,\n      totalTasks: stats?.total || 0,\n      currentPhase: currentPhaseResult[0] || null,\n      teamSatisfactionAvg: Number(teamSatisfactionAvg),\n      learningProgress: Number(learningProgress),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":25027},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  date,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Simplified user table for demo purposes\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Phases of the 90-day plan\nexport const phases = pgTable(\"phases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  startDay: integer(\"start_day\").notNull(),\n  endDay: integer(\"end_day\").notNull(),\n  orderIndex: integer(\"order_index\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tasks and goals\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  phaseId: varchar(\"phase_id\").references(() => phases.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  priority: varchar(\"priority\", { length: 20 }).notNull().default(\"medium\"), // high, medium, low\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, in_progress, completed\n  dueDate: date(\"due_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Team members for assessment\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  role: varchar(\"role\", { length: 100 }),\n  email: varchar(\"email\", { length: 255 }),\n  strengths: text(\"strengths\"),\n  improvementAreas: text(\"improvement_areas\"),\n  careerGoals: text(\"career_goals\"),\n  lastOneOnOneDate: date(\"last_one_on_one_date\"),\n  nextOneOnOneDate: date(\"next_one_on_one_date\"),\n  satisfactionScore: decimal(\"satisfaction_score\", { precision: 2, scale: 1 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Learning resources and progress\nexport const learningResources = pgTable(\"learning_resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // book, course, podcast, workshop\n  url: text(\"url\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"not_started\"), // not_started, in_progress, completed\n  progress: integer(\"progress\").default(0), // percentage\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// KPI metrics tracking\nexport const kpiMetrics = pgTable(\"kpi_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  metricType: varchar(\"metric_type\", { length: 100 }).notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  target: decimal(\"target\", { precision: 10, scale: 2 }),\n  unit: varchar(\"unit\", { length: 20 }),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Weekly self-assessments\nexport const weeklyAssessments = pgTable(\"weekly_assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  weekStartDate: date(\"week_start_date\").notNull(),\n  leadershipSkillsPractice: text(\"leadership_skills_practice\"),\n  teamSupportEfforts: text(\"team_support_efforts\"),\n  strategicInitiatives: text(\"strategic_initiatives\"),\n  stakeholderCommunication: text(\"stakeholder_communication\"),\n  improvementAreas: text(\"improvement_areas\"),\n  overallRating: integer(\"overall_rating\"), // 1-5 scale\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Risk tracking\nexport const risks = pgTable(\"risks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }),\n  probability: varchar(\"probability\", { length: 20 }), // low, medium, high\n  impact: varchar(\"impact\", { length: 20 }), // low, medium, high\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, mitigated, resolved\n  mitigationPlan: text(\"mitigation_plan\"),\n  contingencyPlan: text(\"contingency_plan\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity log for tracking actions\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // task_completed, learning_progress, assessment, etc.\n  description: text(\"description\").notNull(),\n  entityId: varchar(\"entity_id\"), // ID of related entity (task, learning resource, etc.)\n  entityType: varchar(\"entity_type\", { length: 50 }), // task, learning_resource, team_member, etc.\n  metadata: jsonb(\"metadata\"), // Additional data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Follow-up tracker\nexport const followUps = pgTable(\"follow_ups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  assignee: varchar(\"assignee\", { length: 100 }).notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  requester: varchar(\"requester\", { length: 100 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // pending, awaiting_response, completed\n  lastCheckIn: date(\"last_check_in\"),\n  person: varchar(\"person\", { length: 100 }),\n  priority: varchar(\"priority\", { length: 20 }).notNull().default(\"medium\"), // low, medium, high\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"follow_ups_user_id_idx\").on(table.userId),\n  dueDateIdx: index(\"follow_ups_due_date_idx\").on(table.dueDate),\n  statusIdx: index(\"follow_ups_status_idx\").on(table.status),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  tasks: many(tasks),\n  teamMembers: many(teamMembers),\n  learningResources: many(learningResources),\n  kpiMetrics: many(kpiMetrics),\n  weeklyAssessments: many(weeklyAssessments),\n  risks: many(risks),\n  activities: many(activities),\n  followUps: many(followUps),\n  checklists: many(checklists),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  user: one(users, {\n    fields: [tasks.userId],\n    references: [users.id],\n  }),\n  phase: one(phases, {\n    fields: [tasks.phaseId],\n    references: [phases.id],\n  }),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const learningResourcesRelations = relations(learningResources, ({ one }) => ({\n  user: one(users, {\n    fields: [learningResources.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const kpiMetricsRelations = relations(kpiMetrics, ({ one }) => ({\n  user: one(users, {\n    fields: [kpiMetrics.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const weeklyAssessmentsRelations = relations(weeklyAssessments, ({ one }) => ({\n  user: one(users, {\n    fields: [weeklyAssessments.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const risksRelations = relations(risks, ({ one }) => ({\n  user: one(users, {\n    fields: [risks.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  user: one(users, {\n    fields: [activities.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const followUpsRelations = relations(followUps, ({ one }) => ({\n  user: one(users, {\n    fields: [followUps.userId],\n    references: [users.id],\n  }),\n}));\n\n// Checklist tables\nexport const checklists = pgTable(\"checklists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index(\"checklists_user_id_idx\").on(table.userId),\n}));\n\nexport const checklistItems = pgTable(\"checklist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  checklistId: varchar(\"checklist_id\").notNull().references(() => checklists.id, { onDelete: \"cascade\" }),\n  text: text(\"text\").notNull(),\n  completed: boolean(\"completed\").default(false).notNull(),\n  priority: varchar(\"priority\", { length: 10 }).$type<\"low\" | \"medium\" | \"high\">().default(\"medium\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  checklistIdIdx: index(\"checklist_items_checklist_id_idx\").on(table.checklistId),\n  orderIdx: index(\"checklist_items_order_idx\").on(table.order),\n}));\n\nexport const checklistsRelations = relations(checklists, ({ one, many }) => ({\n  user: one(users, {\n    fields: [checklists.userId],\n    references: [users.id],\n  }),\n  items: many(checklistItems),\n}));\n\nexport const checklistItemsRelations = relations(checklistItems, ({ one }) => ({\n  checklist: one(checklists, {\n    fields: [checklistItems.checklistId],\n    references: [checklists.id],\n  }),\n}));\n\nexport const phasesRelations = relations(phases, ({ many }) => ({\n  tasks: many(tasks),\n}));\n\n// Insert schemas\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLearningResourceSchema = createInsertSchema(learningResources).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertKpiMetricSchema = createInsertSchema(kpiMetrics).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertWeeklyAssessmentSchema = createInsertSchema(weeklyAssessments).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRiskSchema = createInsertSchema(risks).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertFollowUpSchema = createInsertSchema(followUps).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type LearningResource = typeof learningResources.$inferSelect;\nexport type InsertLearningResource = z.infer<typeof insertLearningResourceSchema>;\nexport type KpiMetric = typeof kpiMetrics.$inferSelect;\nexport type InsertKpiMetric = z.infer<typeof insertKpiMetricSchema>;\nexport type WeeklyAssessment = typeof weeklyAssessments.$inferSelect;\nexport type InsertWeeklyAssessment = z.infer<typeof insertWeeklyAssessmentSchema>;\nexport type Risk = typeof risks.$inferSelect;\nexport type InsertRisk = z.infer<typeof insertRiskSchema>;\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type FollowUp = typeof followUps.$inferSelect;\nexport type InsertFollowUp = z.infer<typeof insertFollowUpSchema>;\nexport type Phase = typeof phases.$inferSelect;\n\nexport const insertChecklistSchema = createInsertSchema(checklists).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChecklistItemSchema = createInsertSchema(checklistItems).omit({\n  id: true,\n  checklistId: true,\n  createdAt: true,\n});\n\nexport type Checklist = typeof checklists.$inferSelect;\nexport type InsertChecklist = z.infer<typeof insertChecklistSchema>;\nexport type ChecklistItem = typeof checklistItems.$inferSelect;\nexport type InsertChecklistItem = z.infer<typeof insertChecklistItemSchema>;\n","size_bytes":13445},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Timeline from \"@/pages/timeline\";\nimport Tasks from \"@/pages/tasks\";\nimport Team from \"@/pages/team\";\nimport Learning from \"@/pages/learning\";\nimport Metrics from \"@/pages/metrics\";\nimport Assessment from \"@/pages/assessment\";\nimport Risks from \"@/pages/risks\";\nimport FollowUps from \"@/pages/followups\";\nimport Checklists from \"@/pages/checklists\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/timeline\" component={Timeline} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/team\" component={Team} />\n      <Route path=\"/learning\" component={Learning} />\n      <Route path=\"/metrics\" component={Metrics} />\n      <Route path=\"/assessment\" component={Assessment} />\n      <Route path=\"/risks\" component={Risks} />\n      <Route path=\"/followups\" component={FollowUps} />\n      <Route path=\"/checklists\" component={Checklists} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1530},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/assessment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { WeeklyAssessment } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AssessmentModal from \"@/components/forms/assessment-modal\";\nimport { format, startOfWeek, endOfWeek } from \"date-fns\";\n\nexport default function Assessment() {\n  const [showAssessmentModal, setShowAssessmentModal] = useState(false);\n  const [editingAssessment, setEditingAssessment] = useState<WeeklyAssessment | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: assessments = [], isLoading: assessmentsLoading } = useQuery<WeeklyAssessment[]>({\n    queryKey: [\"/api/weekly-assessments\"],\n    retry: false,\n  });\n\n  const deleteAssessmentMutation = useMutation({\n    mutationFn: async (assessmentId: string) => {\n      await apiRequest(\"DELETE\", `/api/weekly-assessments/${assessmentId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-assessments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assessment deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete assessment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditAssessment = (assessment: WeeklyAssessment) => {\n    setEditingAssessment(assessment);\n    setShowAssessmentModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowAssessmentModal(false);\n    setEditingAssessment(null);\n  };\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 4.5) return \"bg-green-500\";\n    if (rating >= 4.0) return \"bg-green-400\";\n    if (rating >= 3.5) return \"bg-yellow-500\";\n    if (rating >= 3.0) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getRatingLabel = (rating: number) => {\n    if (rating >= 4.5) return \"Excellent\";\n    if (rating >= 4.0) return \"Good\";\n    if (rating >= 3.5) return \"Fair\";\n    if (rating >= 3.0) return \"Needs Improvement\";\n    return \"Poor\";\n  };\n\n  // Calculate statistics\n  const totalAssessments = assessments.length;\n  const averageRating = totalAssessments > 0 \n    ? assessments.reduce((sum, a) => sum + (a.overallRating || 0), 0) / totalAssessments \n    : 0;\n  const thisWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n  const hasThisWeekAssessment = assessments.some(a => \n    new Date(a.weekStartDate).getTime() === thisWeekStart.getTime()\n  );\n\n  if (assessmentsLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"Weekly Self-Assessment\"\n            subtitle=\"Reflect on your leadership development and track your progress\"\n            actions={\n              <Button\n                onClick={() => setShowAssessmentModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-create-assessment\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                New Assessment\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* Assessment Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Total Assessments</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-total-assessments\">\n                      {totalAssessments}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-clipboard-check text-primary text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Average Rating</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-average-rating\">\n                      {averageRating.toFixed(1)}/5\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-star text-warning text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">This Week</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-this-week-status\">\n                      {hasThisWeekAssessment ? \"✓\" : \"—\"}\n                    </p>\n                  </div>\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                    hasThisWeekAssessment ? 'bg-green-100' : 'bg-slate-100'\n                  }`}>\n                    <i className={`fas fa-calendar ${hasThisWeekAssessment ? 'text-success' : 'text-slate-400'} text-xl`}></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Streak</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-assessment-streak\">\n                      {Math.min(totalAssessments, 12)}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-fire text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Weekly Self-Assessment Framework */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Weekly Self-Assessment Framework</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-800 mb-2\">\n                      <i className=\"fas fa-user-tie mr-2\"></i>\n                      Leadership Skills Practice\n                    </h4>\n                    <p className=\"text-sm text-blue-700\">\n                      What leadership skills did I practice this week? How did I demonstrate growth?\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <h4 className=\"font-medium text-green-800 mb-2\">\n                      <i className=\"fas fa-users mr-2\"></i>\n                      Team Support Efforts\n                    </h4>\n                    <p className=\"text-sm text-green-700\">\n                      How did I support my team members' growth and development?\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <h4 className=\"font-medium text-purple-800 mb-2\">\n                      <i className=\"fas fa-chess mr-2\"></i>\n                      Strategic Initiatives\n                    </h4>\n                    <p className=\"text-sm text-purple-700\">\n                      What strategic initiatives did I advance? What was the impact?\n                    </p>\n                  </div>\n                  \n                  <div className=\"p-4 bg-amber-50 rounded-lg\">\n                    <h4 className=\"font-medium text-amber-800 mb-2\">\n                      <i className=\"fas fa-comments mr-2\"></i>\n                      Stakeholder Communication\n                    </h4>\n                    <p className=\"text-sm text-amber-700\">\n                      How effectively did I communicate with stakeholders?\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Assessment History */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">Assessment History</h3>\n              \n              {assessmentsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse border-b border-slate-200 pb-4\">\n                      <div className=\"h-6 bg-slate-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-slate-200 rounded w-3/4\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : assessments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-clipboard-list text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No assessments yet</h3>\n                  <p className=\"text-slate-500 mb-6\">\n                    Start your weekly reflection practice by completing your first assessment\n                  </p>\n                  <Button\n                    onClick={() => setShowAssessmentModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Complete First Assessment\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {assessments\n                    .sort((a, b) => new Date(b.weekStartDate).getTime() - new Date(a.weekStartDate).getTime())\n                    .map((assessment) => (\n                      <div key={assessment.id} className=\"border-b border-slate-200 pb-6 last:border-b-0\" data-testid={`assessment-${assessment.id}`}>\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <h4 className=\"text-lg font-semibold text-slate-800\">\n                                Week of {format(new Date(assessment.weekStartDate), 'MMM d, yyyy')}\n                              </h4>\n                              {assessment.overallRating && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className={`w-3 h-3 rounded-full ${getRatingColor(assessment.overallRating)}`}></div>\n                                  <Badge variant=\"outline\">\n                                    {assessment.overallRating}/5 - {getRatingLabel(assessment.overallRating)}\n                                  </Badge>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditAssessment(assessment)}\n                              className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                              data-testid={`button-edit-assessment-${assessment.id}`}\n                            >\n                              <i className=\"fas fa-edit text-sm\"></i>\n                            </Button>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteAssessmentMutation.mutate(assessment.id)}\n                              className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                              data-testid={`button-delete-assessment-${assessment.id}`}\n                            >\n                              <i className=\"fas fa-trash text-sm\"></i>\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          {assessment.leadershipSkillsPractice && (\n                            <div>\n                              <h5 className=\"font-medium text-slate-800 mb-2\">Leadership Skills Practice</h5>\n                              <p className=\"text-sm text-slate-600 bg-slate-50 p-3 rounded\">\n                                {assessment.leadershipSkillsPractice}\n                              </p>\n                            </div>\n                          )}\n                          \n                          {assessment.teamSupportEfforts && (\n                            <div>\n                              <h5 className=\"font-medium text-slate-800 mb-2\">Team Support Efforts</h5>\n                              <p className=\"text-sm text-slate-600 bg-slate-50 p-3 rounded\">\n                                {assessment.teamSupportEfforts}\n                              </p>\n                            </div>\n                          )}\n                          \n                          {assessment.strategicInitiatives && (\n                            <div>\n                              <h5 className=\"font-medium text-slate-800 mb-2\">Strategic Initiatives</h5>\n                              <p className=\"text-sm text-slate-600 bg-slate-50 p-3 rounded\">\n                                {assessment.strategicInitiatives}\n                              </p>\n                            </div>\n                          )}\n                          \n                          {assessment.stakeholderCommunication && (\n                            <div>\n                              <h5 className=\"font-medium text-slate-800 mb-2\">Stakeholder Communication</h5>\n                              <p className=\"text-sm text-slate-600 bg-slate-50 p-3 rounded\">\n                                {assessment.stakeholderCommunication}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n\n                        {assessment.improvementAreas && (\n                          <div className=\"mt-4\">\n                            <h5 className=\"font-medium text-slate-800 mb-2\">Areas for Improvement</h5>\n                            <p className=\"text-sm text-slate-600 bg-amber-50 p-3 rounded border-l-4 border-amber-400\">\n                              {assessment.improvementAreas}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                </div>\n              )}\n            </Card>\n          </main>\n        </div>\n      </div>\n\n      <AssessmentModal \n        open={showAssessmentModal}\n        onOpenChange={handleCloseModal}\n        assessment={editingAssessment}\n      />\n    </>\n  );\n}\n","size_bytes":16233},"client/src/pages/checklists.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport type { Checklist } from \"@shared/schema\";\nimport ChecklistModal from \"../components/forms/checklist-modal\";\nimport ChecklistDetailView from \"../components/checklist/checklist-detail-view\";\n\nexport default function ChecklistsPage() {\n  const [showChecklistModal, setShowChecklistModal] = useState(false);\n  const [editingChecklist, setEditingChecklist] = useState<Checklist | undefined>();\n  const [selectedChecklist, setSelectedChecklist] = useState<Checklist | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: checklists = [], isLoading } = useQuery<Checklist[]>({\n    queryKey: [\"/api/checklists\"],\n  });\n\n  const deleteChecklistMutation = useMutation({\n    mutationFn: async (checklistId: string) => {\n      await apiRequest(\"DELETE\", `/api/checklists/${checklistId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\"] });\n      if (selectedChecklist) {\n        setSelectedChecklist(null);\n      }\n      toast({\n        title: \"Success\",\n        description: \"Checklist deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete checklist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredChecklists = checklists.filter((checklist: Checklist) => {\n    if (searchTerm && !checklist.name.toLowerCase().includes(searchTerm.toLowerCase()) &&\n        !checklist.description?.toLowerCase().includes(searchTerm.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  const formatDate = (dateString: string | Date) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getChecklistProgress = (checklist: Checklist) => {\n    // This would need to be implemented with item counts from the API\n    return 0; // Placeholder for now\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // If a checklist is selected, show the detail view\n  if (selectedChecklist) {\n    return (\n      <ChecklistDetailView \n        checklist={selectedChecklist}\n        onBack={() => setSelectedChecklist(null)}\n        onChecklistUpdated={(updatedChecklist) => {\n          setSelectedChecklist(updatedChecklist);\n          queryClient.invalidateQueries({ queryKey: [\"/api/checklists\"] });\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <div className=\"flex-1 overflow-auto\">\n          <main className=\"p-8\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"mb-8\">\n                <div className=\"flex justify-between items-center mb-6\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-slate-900\">Multipoint Checklists</h1>\n                    <p className=\"text-slate-600 mt-2\">\n                      Create and manage multiple checklists with detailed item tracking\n                    </p>\n                  </div>\n                  <Button\n                    onClick={() => setShowChecklistModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                    data-testid=\"button-create-checklist\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    New Checklist\n                  </Button>\n                </div>\n\n                {/* Search */}\n                <div className=\"flex gap-4 mb-6\">\n                  <Input\n                    placeholder=\"Search checklists...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"max-w-sm\"\n                    data-testid=\"input-search-checklists\"\n                  />\n                </div>\n              </div>\n\n              {/* Checklists Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredChecklists.length === 0 ? (\n                  <div className=\"col-span-full\">\n                    <Card className=\"p-12 text-center\">\n                      <div className=\"max-w-md mx-auto\">\n                        <i className=\"fas fa-list-check text-4xl text-slate-300 mb-4\"></i>\n                        <h3 className=\"text-lg font-medium text-slate-800 mb-2\">\n                          {checklists.length === 0 ? \"No Checklists Yet\" : \"No Matching Checklists\"}\n                        </h3>\n                        <p className=\"text-slate-600 mb-4\">\n                          {checklists.length === 0 \n                            ? \"Create your first multipoint checklist to organize and track tasks.\"\n                            : \"Try adjusting your search to see more results.\"}\n                        </p>\n                        {checklists.length === 0 && (\n                          <Button\n                            onClick={() => setShowChecklistModal(true)}\n                            className=\"bg-primary hover:bg-blue-800\"\n                            data-testid=\"button-add-first-checklist\"\n                          >\n                            <i className=\"fas fa-plus mr-2\"></i>\n                            Create First Checklist\n                          </Button>\n                        )}\n                      </div>\n                    </Card>\n                  </div>\n                ) : (\n                  filteredChecklists.map((checklist: Checklist) => (\n                    <Card \n                      key={checklist.id} \n                      className=\"p-6 hover:shadow-md transition-shadow cursor-pointer\"\n                      onClick={() => setSelectedChecklist(checklist)}\n                      data-testid={`checklist-card-${checklist.id}`}\n                    >\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <h3 className=\"text-lg font-semibold text-slate-800 line-clamp-2\">\n                          {checklist.name}\n                        </h3>\n                        <div className=\"flex gap-2 ml-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setEditingChecklist(checklist);\n                              setShowChecklistModal(true);\n                            }}\n                            data-testid={`button-edit-checklist-${checklist.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              if (confirm(\"Are you sure you want to delete this checklist?\")) {\n                                deleteChecklistMutation.mutate(checklist.id);\n                              }\n                            }}\n                            className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-checklist-${checklist.id}`}\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      {checklist.description && (\n                        <p className=\"text-slate-600 text-sm mb-4 line-clamp-2\">\n                          {checklist.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center text-sm text-slate-500\">\n                          <span>Progress</span>\n                          <span>{getChecklistProgress(checklist)}% complete</span>\n                        </div>\n                        <Progress value={getChecklistProgress(checklist)} className=\"h-2\" />\n                        \n                        <div className=\"flex justify-between items-center text-sm text-slate-500 pt-2 border-t\">\n                          <span>Created {formatDate(checklist.createdAt)}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <i className=\"fas fa-tasks mr-1\"></i>\n                            Click to open\n                          </Badge>\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <ChecklistModal \n        open={showChecklistModal}\n        onOpenChange={(open: boolean) => {\n          setShowChecklistModal(open);\n          if (!open) setEditingChecklist(undefined);\n        }}\n        checklist={editingChecklist}\n      />\n    </>\n  );\n}","size_bytes":10116},"client/src/pages/followups.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport type { FollowUp } from \"@shared/schema\";\nimport FollowUpModal from \"../components/forms/follow-up-modal\";\n\nexport default function FollowUpsPage() {\n  const [showFollowUpModal, setShowFollowUpModal] = useState(false);\n  const [editingFollowUp, setEditingFollowUp] = useState<FollowUp | undefined>();\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: followUps = [], isLoading } = useQuery<FollowUp[]>({\n    queryKey: [\"/api/follow-ups\"],\n  });\n\n  const deleteFollowUpMutation = useMutation({\n    mutationFn: async (followUpId: string) => {\n      await apiRequest(\"DELETE\", `/api/follow-ups/${followUpId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/follow-ups\"] });\n      toast({\n        title: \"Success\",\n        description: \"Follow-up deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete follow-up\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/follow-ups/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/follow-ups\"] });\n      toast({\n        title: \"Success\",\n        description: \"Follow-up status updated\",\n      });\n    },\n  });\n\n  const filteredFollowUps = followUps.filter((followUp: FollowUp) => {\n    if (statusFilter !== \"all\" && followUp.status !== statusFilter) return false;\n    if (priorityFilter !== \"all\" && followUp.priority !== priorityFilter) return false;\n    if (searchTerm && !followUp.title.toLowerCase().includes(searchTerm.toLowerCase()) &&\n        !followUp.assignee.toLowerCase().includes(searchTerm.toLowerCase()) &&\n        !followUp.requester.toLowerCase().includes(searchTerm.toLowerCase())) {\n      return false;\n    }\n    return true;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"awaiting_response\": return \"bg-yellow-100 text-yellow-800\";\n      case \"pending\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-orange-100 text-orange-800\";\n      case \"low\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const isOverdue = (dueDate: string) => {\n    return new Date(dueDate) < new Date() && new Date(dueDate).toDateString() !== new Date().toDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <div className=\"flex-1 overflow-auto\">\n          <main className=\"p-8\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"mb-8\">\n                <div className=\"flex justify-between items-center mb-6\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-slate-900\">Follow-up Tracker</h1>\n                    <p className=\"text-slate-600 mt-2\">\n                      Track and manage follow-up items, assignments, and their progress\n                    </p>\n                  </div>\n                  <Button\n                    onClick={() => setShowFollowUpModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                    data-testid=\"button-create-follow-up\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    New Follow-up\n                  </Button>\n                </div>\n\n                {/* Filters */}\n                <div className=\"flex flex-wrap gap-4 mb-6\">\n                  <Input\n                    placeholder=\"Search follow-ups...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"max-w-sm\"\n                    data-testid=\"input-search-followups\"\n                  />\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"awaiting_response\">Awaiting Response</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-priority-filter\">\n                      <SelectValue placeholder=\"Filter by priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priorities</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Follow-ups List */}\n              <div className=\"space-y-4\">\n                {filteredFollowUps.length === 0 ? (\n                  <Card className=\"p-12 text-center\">\n                    <div className=\"max-w-md mx-auto\">\n                      <i className=\"fas fa-tasks text-4xl text-slate-300 mb-4\"></i>\n                      <h3 className=\"text-lg font-medium text-slate-800 mb-2\">\n                        {followUps.length === 0 ? \"No Follow-ups Yet\" : \"No Matching Follow-ups\"}\n                      </h3>\n                      <p className=\"text-slate-600 mb-4\">\n                        {followUps.length === 0 \n                          ? \"Start tracking follow-up items and assignments to stay organized.\"\n                          : \"Try adjusting your filters to see more results.\"}\n                      </p>\n                      {followUps.length === 0 && (\n                        <Button\n                          onClick={() => setShowFollowUpModal(true)}\n                          className=\"bg-primary hover:bg-blue-800\"\n                          data-testid=\"button-add-first-followup\"\n                        >\n                          <i className=\"fas fa-plus mr-2\"></i>\n                          Add First Follow-up\n                        </Button>\n                      )}\n                    </div>\n                  </Card>\n                ) : (\n                  filteredFollowUps.map((followUp: FollowUp) => (\n                    <Card key={followUp.id} className=\"p-6\" data-testid={`followup-card-${followUp.id}`}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-slate-800\">{followUp.title}</h3>\n                            <Badge className={getStatusColor(followUp.status)}>\n                              {followUp.status.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                            </Badge>\n                            <Badge className={getPriorityColor(followUp.priority)}>\n                              {followUp.priority.toUpperCase()}\n                            </Badge>\n                            {isOverdue(followUp.dueDate) && followUp.status !== \"completed\" && (\n                              <Badge className=\"bg-red-100 text-red-800\">\n                                <i className=\"fas fa-exclamation-triangle mr-1\"></i>\n                                Overdue\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-slate-600 mb-4\">\n                            <div>\n                              <span className=\"font-medium\">Assignee:</span>\n                              <br />\n                              {followUp.assignee}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Requester:</span>\n                              <br />\n                              {followUp.requester}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Due Date:</span>\n                              <br />\n                              <span className={isOverdue(followUp.dueDate) && followUp.status !== \"completed\" ? \"text-red-600 font-medium\" : \"\"}>\n                                {formatDate(followUp.dueDate)}\n                              </span>\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Last Check-in:</span>\n                              <br />\n                              {formatDate(followUp.lastCheckIn)}\n                            </div>\n                          </div>\n\n                          {followUp.person && (\n                            <div className=\"text-sm text-slate-600 mb-4\">\n                              <span className=\"font-medium\">Person:</span> {followUp.person}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2 ml-4\">\n                          <Select \n                            value={followUp.status} \n                            onValueChange={(status) => updateStatusMutation.mutate({ id: followUp.id, status })}\n                          >\n                            <SelectTrigger className=\"w-32\" data-testid={`select-status-${followUp.id}`}>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"awaiting_response\">Awaiting Response</SelectItem>\n                              <SelectItem value=\"completed\">Completed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingFollowUp(followUp);\n                              setShowFollowUpModal(true);\n                            }}\n                            data-testid={`button-edit-followup-${followUp.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteFollowUpMutation.mutate(followUp.id)}\n                            className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-followup-${followUp.id}`}\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <FollowUpModal \n        open={showFollowUpModal}\n        onOpenChange={(open: boolean) => {\n          setShowFollowUpModal(open);\n          if (!open) setEditingFollowUp(undefined);\n        }}\n        followUp={editingFollowUp}\n      />\n    </>\n  );\n}","size_bytes":13624},"client/src/pages/home.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ProgressOverview from \"@/components/dashboard/progress-overview\";\nimport TimelineWidget from \"@/components/dashboard/timeline-widget\";\nimport UpcomingTasks from \"@/components/dashboard/upcoming-tasks\";\nimport KpiMetrics from \"@/components/dashboard/kpi-metrics\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\n\nexport default function Home() {\n\n  return (\n    <div className=\"flex h-screen bg-slate-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-auto\">\n        <Header\n          title=\"Dashboard Overview\"\n          subtitle=\"Track your leadership transition progress\"\n        />\n        \n        <main className=\"p-6\">\n          <ProgressOverview />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8\">\n            <div className=\"lg:col-span-2\">\n              <TimelineWidget />\n            </div>\n            <div>\n              <UpcomingTasks />\n            </div>\n          </div>\n\n          <KpiMetrics />\n\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <RecentActivity />\n            <QuickActions />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1352},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardContent className=\"pt-8 pb-8 text-center\">\n          <div className=\"mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-chart-line text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-2\">\n              DevOps Leadership Transition\n            </h1>\n            <p className=\"text-lg text-slate-600\">\n              Track your 90-day journey from Senior DevOps Engineer to Team Lead\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                <i className=\"fas fa-tasks text-primary\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800\">Task Tracking</h3>\n              <p className=\"text-sm text-slate-600\">Monitor progress through 3 phases</p>\n            </div>\n            \n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                <i className=\"fas fa-users text-success\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800\">Team Management</h3>\n              <p className=\"text-sm text-slate-600\">1:1s and team assessments</p>\n            </div>\n            \n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                <i className=\"fas fa-chart-bar text-purple-600\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-800\">KPI Metrics</h3>\n              <p className=\"text-sm text-slate-600\">Track leadership effectiveness</p>\n            </div>\n          </div>\n\n          <Button \n            onClick={() => window.location.href = \"/api/login\"}\n            className=\"bg-primary hover:bg-blue-800 text-white px-8 py-3 text-lg\"\n            data-testid=\"button-login\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            Get Started\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2639},"client/src/pages/learning.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { LearningResource } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport LearningResourceModal from \"@/components/forms/learning-resource-modal\";\n\nconst TYPE_COLORS = {\n  book: \"bg-blue-100 text-blue-800\",\n  course: \"bg-green-100 text-green-800\",\n  podcast: \"bg-purple-100 text-purple-800\",\n  workshop: \"bg-amber-100 text-amber-800\",\n} as const;\n\nconst STATUS_COLORS = {\n  not_started: \"bg-slate-100 text-slate-600\",\n  in_progress: \"bg-amber-100 text-amber-800\",\n  completed: \"bg-green-100 text-green-800\",\n} as const;\n\nexport default function Learning() {\n  const [showResourceModal, setShowResourceModal] = useState(false);\n  const [editingResource, setEditingResource] = useState<LearningResource | null>(null);\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: resources = [], isLoading: resourcesLoading } = useQuery<LearningResource[]>({\n    queryKey: [\"/api/learning-resources\"],\n    retry: false,\n  });\n\n  const updateResourceMutation = useMutation({\n    mutationFn: async ({ resourceId, updates }: { resourceId: string; updates: Partial<LearningResource> }) => {\n      await apiRequest(\"PUT\", `/api/learning-resources/${resourceId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-resources\"] });\n      toast({\n        title: \"Success\",\n        description: \"Learning resource updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update learning resource\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteResourceMutation = useMutation({\n    mutationFn: async (resourceId: string) => {\n      await apiRequest(\"DELETE\", `/api/learning-resources/${resourceId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-resources\"] });\n      toast({\n        title: \"Success\",\n        description: \"Learning resource deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete learning resource\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditResource = (resource: LearningResource) => {\n    setEditingResource(resource);\n    setShowResourceModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowResourceModal(false);\n    setEditingResource(null);\n  };\n\n  const handleMarkComplete = (resource: LearningResource) => {\n    updateResourceMutation.mutate({\n      resourceId: resource.id,\n      updates: {\n        status: \"completed\",\n        progress: 100,\n        completedAt: new Date(),\n      },\n    });\n  };\n\n  const filteredResources = resources.filter((resource) => {\n    if (filterType !== \"all\" && resource.type !== filterType) return false;\n    if (filterStatus !== \"all\" && resource.status !== filterStatus) return false;\n    return true;\n  });\n\n  // Calculate statistics\n  const totalResources = resources.length;\n  const completedResources = resources.filter(r => r.status === \"completed\").length;\n  const inProgressResources = resources.filter(r => r.status === \"in_progress\").length;\n  const averageProgress = totalResources > 0 \n    ? resources.reduce((sum, r) => sum + (r.progress || 0), 0) / totalResources \n    : 0;\n\n  if (resourcesLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"Learning Resources\"\n            subtitle=\"Track your professional development and learning progress\"\n            actions={\n              <Button\n                onClick={() => setShowResourceModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-add-learning-resource\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Add Resource\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* Learning Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Total Resources</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-total-resources\">\n                      {totalResources}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-book text-primary text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Completed</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-completed-resources\">\n                      {completedResources}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-check-circle text-success text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">In Progress</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-in-progress-resources\">\n                      {inProgressResources}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-warning text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Avg Progress</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-avg-progress\">\n                      {Math.round(averageProgress)}%\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-chart-bar text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card className=\"p-4 mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Type:</label>\n                  <Select value={filterType} onValueChange={setFilterType}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-filter-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"book\">Books</SelectItem>\n                      <SelectItem value=\"course\">Courses</SelectItem>\n                      <SelectItem value=\"podcast\">Podcasts</SelectItem>\n                      <SelectItem value=\"workshop\">Workshops</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Status:</label>\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"not_started\">Not Started</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </Card>\n\n            {/* Learning Resources List */}\n            <div className=\"space-y-4\">\n              {resourcesLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Card key={i} className=\"p-6 animate-pulse\">\n                      <div className=\"h-20 bg-slate-200 rounded\"></div>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredResources.length === 0 ? (\n                <Card className=\"p-12 text-center\">\n                  <i className=\"fas fa-book text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No learning resources found</h3>\n                  <p className=\"text-slate-500 mb-6\">\n                    {filterType !== \"all\" || filterStatus !== \"all\" \n                      ? \"Try adjusting your filters or add a new resource\"\n                      : \"Start your learning journey by adding resources\"\n                    }\n                  </p>\n                  <Button\n                    onClick={() => setShowResourceModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Learning Resource\n                  </Button>\n                </Card>\n              ) : (\n                filteredResources.map((resource) => (\n                  <Card key={resource.id} className=\"p-6\" data-testid={`resource-card-${resource.id}`}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-slate-800\">{resource.title}</h3>\n                          <Badge className={TYPE_COLORS[resource.type as keyof typeof TYPE_COLORS]}>\n                            {resource.type}\n                          </Badge>\n                          <Badge className={STATUS_COLORS[resource.status as keyof typeof STATUS_COLORS]}>\n                            {resource.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        \n                        {resource.url && (\n                          <a \n                            href={resource.url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-primary hover:text-blue-800 text-sm mb-3 inline-block\"\n                          >\n                            <i className=\"fas fa-external-link-alt mr-1\"></i>\n                            View Resource\n                          </a>\n                        )}\n\n                        <div className=\"mb-4\">\n                          <div className=\"flex justify-between text-sm text-slate-600 mb-2\">\n                            <span>Progress</span>\n                            <span>{resource.progress || 0}%</span>\n                          </div>\n                          <Progress value={resource.progress || 0} className=\"h-2\" />\n                        </div>\n\n                        <div className=\"flex items-center space-x-6 text-sm text-slate-600\">\n                          {resource.startedAt && (\n                            <div className=\"flex items-center space-x-1\">\n                              <i className=\"fas fa-play text-slate-400\"></i>\n                              <span>Started: {new Date(resource.startedAt).toLocaleDateString()}</span>\n                            </div>\n                          )}\n                          \n                          {resource.completedAt && (\n                            <div className=\"flex items-center space-x-1\">\n                              <i className=\"fas fa-check-circle text-green-500\"></i>\n                              <span>Completed: {new Date(resource.completedAt).toLocaleDateString()}</span>\n                            </div>\n                          )}\n                        </div>\n\n                        {resource.notes && (\n                          <div className=\"mt-3 p-3 bg-slate-50 rounded-lg\">\n                            <p className=\"text-sm text-slate-600\">{resource.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        {resource.status !== \"completed\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleMarkComplete(resource)}\n                            className=\"text-green-600 hover:text-green-800 hover:bg-green-50\"\n                            data-testid={`button-complete-resource-${resource.id}`}\n                          >\n                            <i className=\"fas fa-check text-sm\"></i>\n                          </Button>\n                        )}\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditResource(resource)}\n                          className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                          data-testid={`button-edit-resource-${resource.id}`}\n                        >\n                          <i className=\"fas fa-edit text-sm\"></i>\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteResourceMutation.mutate(resource.id)}\n                          className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                          data-testid={`button-delete-resource-${resource.id}`}\n                        >\n                          <i className=\"fas fa-trash text-sm\"></i>\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <LearningResourceModal \n        open={showResourceModal}\n        onOpenChange={handleCloseModal}\n        resource={editingResource}\n      />\n    </>\n  );\n}\n","size_bytes":16240},"client/src/pages/metrics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { KpiMetric } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport MetricModal from \"@/components/forms/metric-modal\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\nconst METRIC_TYPES = [\n  { value: \"deployment_frequency\", label: \"Deployment Frequency\", unit: \"per week\", icon: \"fas fa-rocket\", color: \"text-success\" },\n  { value: \"lead_time\", label: \"Lead Time for Changes\", unit: \"hours\", icon: \"fas fa-clock\", color: \"text-primary\" },\n  { value: \"mttr\", label: \"Mean Time to Recovery\", unit: \"minutes\", icon: \"fas fa-tools\", color: \"text-warning\" },\n  { value: \"failure_rate\", label: \"Change Failure Rate\", unit: \"%\", icon: \"fas fa-shield-alt\", color: \"text-accent\" },\n  { value: \"team_satisfaction\", label: \"Team Satisfaction\", unit: \"/5\", icon: \"fas fa-star\", color: \"text-warning\" },\n  { value: \"system_uptime\", label: \"System Uptime\", unit: \"%\", icon: \"fas fa-server\", color: \"text-success\" },\n];\n\nexport default function Metrics() {\n  const [showMetricModal, setShowMetricModal] = useState(false);\n  const [selectedMetricType, setSelectedMetricType] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: metrics = [], isLoading: metricsLoading } = useQuery<KpiMetric[]>({\n    queryKey: [\"/api/kpi-metrics\"],\n    retry: false,\n  });\n\n  const deleteMetricMutation = useMutation({\n    mutationFn: async (metricId: string) => {\n      await apiRequest(\"DELETE\", `/api/kpi-metrics/${metricId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kpi-metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Metric deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete metric\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Group metrics by type and get latest values\n  const metricsByType = METRIC_TYPES.map(type => {\n    const typeMetrics = metrics.filter(m => m.metricType === type.value);\n    const latestMetric = typeMetrics.sort((a, b) => new Date(b.recordedAt || new Date()).getTime() - new Date(a.recordedAt || new Date()).getTime())[0];\n    \n    return {\n      ...type,\n      latestValue: latestMetric?.value || null,\n      target: latestMetric?.target || null,\n      metrics: typeMetrics,\n      trend: typeMetrics.length > 1 ? \n        (Number(typeMetrics[0].value) - Number(typeMetrics[1].value)) : 0,\n    };\n  });\n\n  // Prepare chart data for selected metric type\n  const getChartData = (metricType: string) => {\n    const typeMetrics = metrics\n      .filter(m => m.metricType === metricType)\n      .sort((a, b) => new Date(a.recordedAt || new Date()).getTime() - new Date(b.recordedAt || new Date()).getTime())\n      .slice(-10); // Last 10 entries\n\n    return typeMetrics.map(metric => ({\n      date: new Date(metric.recordedAt || new Date()).toLocaleDateString(),\n      value: Number(metric.value),\n      target: Number(metric.target || 0),\n    }));\n  };\n\n  const filteredMetrics = selectedMetricType === \"all\" \n    ? metrics \n    : metrics.filter(m => m.metricType === selectedMetricType);\n\n  if (metricsLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"KPI Metrics\"\n            subtitle=\"Track key performance indicators and team effectiveness metrics\"\n            actions={\n              <Button\n                onClick={() => setShowMetricModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-add-metric\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Record Metric\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* KPI Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n              {metricsByType.map((metric) => (\n                <Card key={metric.value} className=\"p-6\" data-testid={`metric-card-${metric.value}`}>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        metric.color.includes('success') ? 'bg-green-100' :\n                        metric.color.includes('primary') ? 'bg-blue-100' :\n                        metric.color.includes('warning') ? 'bg-amber-100' :\n                        metric.color.includes('accent') ? 'bg-red-100' : 'bg-slate-100'\n                      }`}>\n                        <i className={`${metric.icon} ${metric.color}`}></i>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-slate-800 text-sm\">{metric.label}</h3>\n                        <p className=\"text-xs text-slate-500\">{metric.metrics.length} records</p>\n                      </div>\n                    </div>\n                    \n                    {metric.trend !== 0 && (\n                      <div className={`flex items-center space-x-1 ${\n                        metric.trend > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        <i className={`fas ${metric.trend > 0 ? 'fa-arrow-up' : 'fa-arrow-down'} text-xs`}></i>\n                        <span className=\"text-xs\">{Math.abs(metric.trend).toFixed(1)}</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Current:</span>\n                      <span className=\"font-bold text-slate-800\" data-testid={`text-${metric.value}-current`}>\n                        {metric.latestValue ? `${metric.latestValue}${metric.unit}` : 'No data'}\n                      </span>\n                    </div>\n                    \n                    {metric.target && (\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-slate-600\">Target:</span>\n                        <span className=\"text-sm text-slate-600\">\n                          {metric.target}{metric.unit}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {/* Chart Section */}\n            {selectedMetricType !== \"all\" && (\n              <Card className=\"p-6 mb-8\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold text-slate-800\">Trend Analysis</h3>\n                  <Select value={selectedMetricType} onValueChange={setSelectedMetricType}>\n                    <SelectTrigger className=\"w-64\" data-testid=\"select-chart-metric\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Select metric to chart</SelectItem>\n                      {METRIC_TYPES.map(type => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={getChartData(selectedMetricType)}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"value\" \n                        stroke=\"#1E40AF\" \n                        strokeWidth={2}\n                        name=\"Actual Value\"\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"target\" \n                        stroke=\"#DC2626\" \n                        strokeDasharray=\"5 5\"\n                        name=\"Target\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </Card>\n            )}\n\n            {/* Filter */}\n            <Card className=\"p-4 mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Metric Type:</label>\n                  <Select value={selectedMetricType} onValueChange={setSelectedMetricType}>\n                    <SelectTrigger className=\"w-64\" data-testid=\"select-filter-metric\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Metrics</SelectItem>\n                      {METRIC_TYPES.map(type => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </Card>\n\n            {/* Metrics History */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">Metrics History</h3>\n              \n              {metricsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse border-b border-slate-200 pb-4\">\n                      <div className=\"h-4 bg-slate-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-slate-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredMetrics.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-chart-line text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No metrics recorded</h3>\n                  <p className=\"text-slate-500 mb-6\">Start tracking your KPIs by recording your first metric</p>\n                  <Button\n                    onClick={() => setShowMetricModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Record First Metric\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredMetrics\n                    .sort((a, b) => new Date(b.recordedAt || new Date()).getTime() - new Date(a.recordedAt || new Date()).getTime())\n                    .map((metric) => {\n                      const metricType = METRIC_TYPES.find(t => t.value === metric.metricType);\n                      \n                      return (\n                        <div key={metric.id} className=\"border-b border-slate-200 pb-4 last:border-b-0\" data-testid={`metric-record-${metric.id}`}>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                                metricType?.color.includes('success') ? 'bg-green-100' :\n                                metricType?.color.includes('primary') ? 'bg-blue-100' :\n                                metricType?.color.includes('warning') ? 'bg-amber-100' :\n                                metricType?.color.includes('accent') ? 'bg-red-100' : 'bg-slate-100'\n                              }`}>\n                                <i className={`${metricType?.icon} ${metricType?.color} text-sm`}></i>\n                              </div>\n                              \n                              <div>\n                                <h4 className=\"font-medium text-slate-800\">\n                                  {metricType?.label || metric.metricType}\n                                </h4>\n                                <p className=\"text-sm text-slate-600\">\n                                  {new Date(metric.recordedAt || new Date()).toLocaleDateString()} at {new Date(metric.recordedAt || new Date()).toLocaleTimeString()}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-slate-800\">\n                                  {metric.value}{metricType?.unit || metric.unit}\n                                </p>\n                                {metric.target && (\n                                  <p className=\"text-sm text-slate-500\">\n                                    Target: {metric.target}{metricType?.unit || metric.unit}\n                                  </p>\n                                )}\n                              </div>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => deleteMetricMutation.mutate(metric.id)}\n                                className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                                data-testid={`button-delete-metric-${metric.id}`}\n                              >\n                                <i className=\"fas fa-trash text-sm\"></i>\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          {metric.notes && (\n                            <div className=\"mt-2 ml-11 p-2 bg-slate-50 rounded text-sm text-slate-600\">\n                              {metric.notes}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                </div>\n              )}\n            </Card>\n          </main>\n        </div>\n      </div>\n\n      <MetricModal \n        open={showMetricModal}\n        onOpenChange={setShowMetricModal}\n      />\n    </>\n  );\n}\n","size_bytes":15742},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/risks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Risk } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport RiskModal from \"@/components/forms/risk-modal\";\n\nconst PROBABILITY_COLORS = {\n  low: \"bg-green-100 text-green-800\",\n  medium: \"bg-amber-100 text-amber-800\", \n  high: \"bg-red-100 text-red-800\",\n} as const;\n\nconst IMPACT_COLORS = {\n  low: \"bg-blue-100 text-blue-800\",\n  medium: \"bg-orange-100 text-orange-800\",\n  high: \"bg-red-100 text-red-800\",\n} as const;\n\nconst STATUS_COLORS = {\n  active: \"bg-red-100 text-red-800\",\n  mitigated: \"bg-amber-100 text-amber-800\",\n  resolved: \"bg-green-100 text-green-800\",\n} as const;\n\nconst RISK_CATEGORIES = [\n  \"Technical Skills Atrophy\",\n  \"Team Resistance to Change\", \n  \"Overwhelming Workload\",\n  \"Stakeholder Misalignment\",\n  \"Communication Breakdown\",\n  \"Resource Constraints\",\n  \"Timeline Pressure\",\n  \"Knowledge Gap\",\n  \"Process Failure\",\n  \"Technology Risk\",\n];\n\nexport default function Risks() {\n  const [showRiskModal, setShowRiskModal] = useState(false);\n  const [editingRisk, setEditingRisk] = useState<Risk | null>(null);\n  const [filterCategory, setFilterCategory] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterProbability, setFilterProbability] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: risks = [], isLoading: risksLoading } = useQuery<Risk[]>({\n    queryKey: [\"/api/risks\"],\n    retry: false,\n  });\n\n  const updateRiskMutation = useMutation({\n    mutationFn: async ({ riskId, updates }: { riskId: string; updates: Partial<Risk> }) => {\n      await apiRequest(\"PUT\", `/api/risks/${riskId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/risks\"] });\n      toast({\n        title: \"Success\",\n        description: \"Risk updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update risk\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRiskMutation = useMutation({\n    mutationFn: async (riskId: string) => {\n      await apiRequest(\"DELETE\", `/api/risks/${riskId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/risks\"] });\n      toast({\n        title: \"Success\",\n        description: \"Risk deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete risk\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditRisk = (risk: Risk) => {\n    setEditingRisk(risk);\n    setShowRiskModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowRiskModal(false);\n    setEditingRisk(null);\n  };\n\n  const handleQuickStatusUpdate = (risk: Risk, newStatus: string) => {\n    updateRiskMutation.mutate({\n      riskId: risk.id,\n      updates: { status: newStatus },\n    });\n  };\n\n  const getRiskScore = (probability: string, impact: string) => {\n    const probMap = { low: 1, medium: 2, high: 3 };\n    const impactMap = { low: 1, medium: 2, high: 3 };\n    return (probMap[probability as keyof typeof probMap] || 1) * (impactMap[impact as keyof typeof impactMap] || 1);\n  };\n\n  const getRiskScoreColor = (score: number) => {\n    if (score >= 6) return \"text-red-600\";\n    if (score >= 4) return \"text-orange-600\";\n    return \"text-green-600\";\n  };\n\n  const filteredRisks = risks.filter((risk) => {\n    if (filterCategory !== \"all\" && risk.category !== filterCategory) return false;\n    if (filterStatus !== \"all\" && risk.status !== filterStatus) return false;\n    if (filterProbability !== \"all\" && risk.probability !== filterProbability) return false;\n    return true;\n  });\n\n  // Calculate statistics\n  const totalRisks = risks.length;\n  const activeRisks = risks.filter(r => r.status === \"active\").length;\n  const highRisks = risks.filter(r => \n    getRiskScore(r.probability || \"low\", r.impact || \"low\") >= 6\n  ).length;\n  const mitigatedRisks = risks.filter(r => r.status === \"mitigated\").length;\n\n  if (risksLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"Risk Mitigation\"\n            subtitle=\"Identify, track, and mitigate risks in your leadership transition\"\n            actions={\n              <Button\n                onClick={() => setShowRiskModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-add-risk\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Add Risk\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* Risk Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Total Risks</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-total-risks\">\n                      {totalRisks}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-slate-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-triangle text-slate-600 text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Active Risks</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-active-risks\">\n                      {activeRisks}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-circle text-accent text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">High Priority</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-high-priority-risks\">\n                      {highRisks}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-fire text-orange-600 text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Mitigated</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-mitigated-risks\">\n                      {mitigatedRisks}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-shield-alt text-warning text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Common Risks Framework */}\n            <Card className=\"p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-4\">Common Leadership Transition Risks</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"p-4 bg-red-50 rounded-lg border-l-4 border-red-400\">\n                  <h4 className=\"font-medium text-red-800 mb-2\">Technical Skills Atrophy</h4>\n                  <p className=\"text-sm text-red-700\">\n                    Risk of losing hands-on technical skills while focusing on leadership\n                  </p>\n                </div>\n                \n                <div className=\"p-4 bg-orange-50 rounded-lg border-l-4 border-orange-400\">\n                  <h4 className=\"font-medium text-orange-800 mb-2\">Team Resistance</h4>\n                  <p className=\"text-sm text-orange-700\">\n                    Team members may resist changes or new leadership approaches\n                  </p>\n                </div>\n                \n                <div className=\"p-4 bg-amber-50 rounded-lg border-l-4 border-amber-400\">\n                  <h4 className=\"font-medium text-amber-800 mb-2\">Overwhelming Workload</h4>\n                  <p className=\"text-sm text-amber-700\">\n                    Balancing individual contributions with leadership responsibilities\n                  </p>\n                </div>\n                \n                <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">Stakeholder Misalignment</h4>\n                  <p className=\"text-sm text-blue-700\">\n                    Inconsistent expectations from different stakeholders\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            {/* Filters */}\n            <Card className=\"p-4 mb-6\">\n              <div className=\"flex items-center space-x-4 flex-wrap gap-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Category:</label>\n                  <Select value={filterCategory} onValueChange={setFilterCategory}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-filter-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {RISK_CATEGORIES.map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Status:</label>\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"mitigated\">Mitigated</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Probability:</label>\n                  <Select value={filterProbability} onValueChange={setFilterProbability}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-filter-probability\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Levels</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </Card>\n\n            {/* Risks List */}\n            <div className=\"space-y-4\">\n              {risksLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Card key={i} className=\"p-6 animate-pulse\">\n                      <div className=\"h-20 bg-slate-200 rounded\"></div>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredRisks.length === 0 ? (\n                <Card className=\"p-12 text-center\">\n                  <i className=\"fas fa-shield-alt text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No risks found</h3>\n                  <p className=\"text-slate-500 mb-6\">\n                    {filterCategory !== \"all\" || filterStatus !== \"all\" || filterProbability !== \"all\"\n                      ? \"Try adjusting your filters or add a new risk\"\n                      : \"Start proactive risk management by identifying potential risks\"\n                    }\n                  </p>\n                  <Button\n                    onClick={() => setShowRiskModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add First Risk\n                  </Button>\n                </Card>\n              ) : (\n                filteredRisks\n                  .sort((a, b) => {\n                    // Sort by risk score (probability × impact) descending\n                    const scoreA = getRiskScore(a.probability || \"low\", a.impact || \"low\");\n                    const scoreB = getRiskScore(b.probability || \"low\", b.impact || \"low\");\n                    return scoreB - scoreA;\n                  })\n                  .map((risk) => {\n                    const riskScore = getRiskScore(risk.probability || \"low\", risk.impact || \"low\");\n                    \n                    return (\n                      <Card key={risk.id} className=\"p-6\" data-testid={`risk-card-${risk.id}`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <h3 className=\"text-lg font-semibold text-slate-800\">{risk.title}</h3>\n                              \n                              <div className=\"flex items-center space-x-2\">\n                                <Badge className={STATUS_COLORS[risk.status as keyof typeof STATUS_COLORS]}>\n                                  {risk.status}\n                                </Badge>\n                                \n                                {risk.probability && (\n                                  <Badge className={PROBABILITY_COLORS[risk.probability as keyof typeof PROBABILITY_COLORS]}>\n                                    {risk.probability} prob\n                                  </Badge>\n                                )}\n                                \n                                {risk.impact && (\n                                  <Badge className={IMPACT_COLORS[risk.impact as keyof typeof IMPACT_COLORS]}>\n                                    {risk.impact} impact\n                                  </Badge>\n                                )}\n                                \n                                <Badge variant=\"outline\" className={getRiskScoreColor(riskScore)}>\n                                  Risk Score: {riskScore}/9\n                                </Badge>\n                              </div>\n                            </div>\n                            \n                            {risk.category && (\n                              <p className=\"text-sm text-slate-600 mb-2\">\n                                <i className=\"fas fa-tag mr-1\"></i>\n                                {risk.category}\n                              </p>\n                            )}\n\n                            {risk.description && (\n                              <p className=\"text-slate-700 mb-4\">{risk.description}</p>\n                            )}\n\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                              {risk.mitigationPlan && (\n                                <div className=\"p-3 bg-green-50 rounded-lg\">\n                                  <h4 className=\"font-medium text-green-800 mb-2\">\n                                    <i className=\"fas fa-shield-alt mr-2\"></i>\n                                    Mitigation Plan\n                                  </h4>\n                                  <p className=\"text-sm text-green-700\">{risk.mitigationPlan}</p>\n                                </div>\n                              )}\n                              \n                              {risk.contingencyPlan && (\n                                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                                  <h4 className=\"font-medium text-blue-800 mb-2\">\n                                    <i className=\"fas fa-life-ring mr-2\"></i>\n                                    Contingency Plan\n                                  </h4>\n                                  <p className=\"text-sm text-blue-700\">{risk.contingencyPlan}</p>\n                                </div>\n                              )}\n                            </div>\n\n                            <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                              <span>Created: {new Date(risk.createdAt).toLocaleDateString()}</span>\n                              <span>Updated: {new Date(risk.updatedAt).toLocaleDateString()}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            {risk.status === \"active\" && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleQuickStatusUpdate(risk, \"mitigated\")}\n                                className=\"text-amber-600 hover:text-amber-800 hover:bg-amber-50\"\n                                data-testid={`button-mitigate-risk-${risk.id}`}\n                              >\n                                <i className=\"fas fa-shield text-sm\"></i>\n                              </Button>\n                            )}\n                            \n                            {(risk.status === \"active\" || risk.status === \"mitigated\") && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleQuickStatusUpdate(risk, \"resolved\")}\n                                className=\"text-green-600 hover:text-green-800 hover:bg-green-50\"\n                                data-testid={`button-resolve-risk-${risk.id}`}\n                              >\n                                <i className=\"fas fa-check text-sm\"></i>\n                              </Button>\n                            )}\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditRisk(risk)}\n                              className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                              data-testid={`button-edit-risk-${risk.id}`}\n                            >\n                              <i className=\"fas fa-edit text-sm\"></i>\n                            </Button>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteRiskMutation.mutate(risk.id)}\n                              className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                              data-testid={`button-delete-risk-${risk.id}`}\n                            >\n                              <i className=\"fas fa-trash text-sm\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <RiskModal \n        open={showRiskModal}\n        onOpenChange={handleCloseModal}\n        risk={editingRisk}\n      />\n    </>\n  );\n}\n","size_bytes":21547},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Task } from \"@shared/schema\";\nimport { PRIORITY_COLORS, STATUS_COLORS, PHASE_DATA } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TaskModal from \"@/components/forms/task-modal\";\n\nexport default function Tasks() {\n  const [showTaskModal, setShowTaskModal] = useState(false);\n  const [filterPhase, setFilterPhase] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n    retry: false,\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, updates }: { taskId: string; updates: Partial<Task> }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (taskId: string) => {\n      await apiRequest(\"DELETE\", `/api/tasks/${taskId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTaskComplete = (task: Task, completed: boolean) => {\n    updateTaskMutation.mutate({\n      taskId: task.id,\n      updates: {\n        status: completed ? \"completed\" : \"pending\",\n        completedAt: completed ? new Date() : null,\n      },\n    });\n  };\n\n  const filteredTasks = tasks.filter((task) => {\n    if (filterPhase !== \"all\" && task.phaseId !== filterPhase) return false;\n    if (filterStatus !== \"all\" && task.status !== filterStatus) return false;\n    return true;\n  });\n\n  if (tasksLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"Tasks & Goals\"\n            subtitle=\"Manage your leadership development tasks and track progress\"\n            actions={\n              <Button\n                onClick={() => setShowTaskModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-create-task\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                New Task\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* Filters */}\n            <Card className=\"p-4 mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Phase:</label>\n                  <Select value={filterPhase} onValueChange={setFilterPhase}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-filter-phase\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Phases</SelectItem>\n                      {PHASE_DATA.map((phase) => (\n                        <SelectItem key={phase.id} value={phase.id}>\n                          {phase.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Status:</label>\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </Card>\n\n            {/* Tasks List */}\n            <div className=\"space-y-4\">\n              {tasksLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Card key={i} className=\"p-6 animate-pulse\">\n                      <div className=\"h-6 bg-slate-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-slate-200 rounded w-3/4\"></div>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredTasks.length === 0 ? (\n                <Card className=\"p-12 text-center\">\n                  <i className=\"fas fa-tasks text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No tasks found</h3>\n                  <p className=\"text-slate-500 mb-6\">\n                    {filterPhase !== \"all\" || filterStatus !== \"all\" \n                      ? \"Try adjusting your filters or create a new task\"\n                      : \"Create your first task to get started\"\n                    }\n                  </p>\n                  <Button\n                    onClick={() => setShowTaskModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Task\n                  </Button>\n                </Card>\n              ) : (\n                filteredTasks.map((task) => (\n                  <Card key={task.id} className=\"p-6\" data-testid={`task-card-${task.id}`}>\n                    <div className=\"flex items-start space-x-4\">\n                      <Checkbox\n                        checked={task.status === \"completed\"}\n                        onCheckedChange={(checked) => handleTaskComplete(task, !!checked)}\n                        className=\"mt-1\"\n                        data-testid={`checkbox-task-${task.id}`}\n                      />\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className={`font-semibold text-lg ${\n                              task.status === \"completed\" ? \"text-slate-500 line-through\" : \"text-slate-800\"\n                            }`}>\n                              {task.title}\n                            </h3>\n                            {task.description && (\n                              <p className=\"text-slate-600 mt-1\">{task.description}</p>\n                            )}\n                            \n                            <div className=\"flex items-center space-x-4 mt-3\">\n                              {task.phaseId && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <i className=\"fas fa-layer-group text-slate-400 text-sm\"></i>\n                                  <span className=\"text-sm text-slate-600\">\n                                    {PHASE_DATA.find(p => p.id === task.phaseId)?.name || task.phaseId}\n                                  </span>\n                                </div>\n                              )}\n                              \n                              {task.dueDate && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <i className=\"fas fa-calendar text-slate-400 text-sm\"></i>\n                                  <span className=\"text-sm text-slate-600\">\n                                    Due {new Date(task.dueDate).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              )}\n                              \n                              {task.completedAt && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <i className=\"fas fa-check-circle text-green-500 text-sm\"></i>\n                                  <span className=\"text-sm text-green-600\">\n                                    Completed {new Date(task.completedAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            <Badge className={PRIORITY_COLORS[task.priority as keyof typeof PRIORITY_COLORS]}>\n                              {task.priority}\n                            </Badge>\n                            <Badge className={STATUS_COLORS[task.status as keyof typeof STATUS_COLORS]}>\n                              {task.status.replace('_', ' ')}\n                            </Badge>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteTaskMutation.mutate(task.id)}\n                              className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                              data-testid={`button-delete-task-${task.id}`}\n                            >\n                              <i className=\"fas fa-trash text-sm\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        {task.notes && (\n                          <div className=\"mt-3 p-3 bg-slate-50 rounded-lg\">\n                            <p className=\"text-sm text-slate-600\">{task.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </Card>\n                ))\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <TaskModal \n        open={showTaskModal}\n        onOpenChange={setShowTaskModal}\n      />\n    </>\n  );\n}\n","size_bytes":11957},"client/src/pages/team.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TeamMember } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TeamMemberModal from \"@/components/forms/team-member-modal\";\n\nexport default function Team() {\n  const [showMemberModal, setShowMemberModal] = useState(false);\n  const [editingMember, setEditingMember] = useState<TeamMember | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: teamMembers = [], isLoading: membersLoading } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/team-members\"],\n    retry: false,\n  });\n\n  const deleteTeamMemberMutation = useMutation({\n    mutationFn: async (memberId: string) => {\n      await apiRequest(\"DELETE\", `/api/team-members/${memberId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/team-members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Team member removed successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditMember = (member: TeamMember) => {\n    setEditingMember(member);\n    setShowMemberModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowMemberModal(false);\n    setEditingMember(null);\n  };\n\n  const getSatisfactionColor = (score: number | null) => {\n    if (!score) return \"bg-slate-200\";\n    if (score >= 4.5) return \"bg-green-500\";\n    if (score >= 4.0) return \"bg-green-400\";\n    if (score >= 3.5) return \"bg-yellow-500\";\n    if (score >= 3.0) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getNextOneOnOneStatus = (nextDate: string | null) => {\n    if (!nextDate) return { label: \"Not Scheduled\", color: \"bg-slate-100 text-slate-600\" };\n    \n    const next = new Date(nextDate);\n    const today = new Date();\n    const diffDays = Math.ceil((next.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return { label: \"Overdue\", color: \"bg-red-100 text-red-800\" };\n    if (diffDays === 0) return { label: \"Today\", color: \"bg-amber-100 text-amber-800\" };\n    if (diffDays <= 3) return { label: \"This Week\", color: \"bg-blue-100 text-blue-800\" };\n    return { label: \"Scheduled\", color: \"bg-green-100 text-green-800\" };\n  };\n\n  if (membersLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-slate-50\">\n        <Sidebar />\n        \n        <div className=\"flex-1 overflow-auto\">\n          <Header\n            title=\"Team Assessment\"\n            subtitle=\"Manage your team members and track 1:1 meetings\"\n            actions={\n              <Button\n                onClick={() => setShowMemberModal(true)}\n                className=\"bg-primary hover:bg-blue-800\"\n                data-testid=\"button-add-team-member\"\n              >\n                <i className=\"fas fa-user-plus mr-2\"></i>\n                Add Team Member\n              </Button>\n            }\n          />\n          \n          <main className=\"p-6\">\n            {/* Team Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Team Size</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-team-size\">\n                      {teamMembers.length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-users text-primary text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Avg Satisfaction</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-avg-satisfaction\">\n                      {teamMembers.length > 0 \n                        ? (teamMembers.reduce((sum, member) => sum + (Number(member.satisfactionScore) || 0), 0) / teamMembers.length).toFixed(1)\n                        : \"0.0\"\n                      }/5\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-star text-success text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Pending 1:1s</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-pending-one-on-ones\">\n                      {teamMembers.filter(member => {\n                        if (!member.nextOneOnOneDate) return true;\n                        const next = new Date(member.nextOneOnOneDate);\n                        const today = new Date();\n                        return next <= today;\n                      }).length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-calendar-check text-warning text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Development Plans</p>\n                    <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid=\"text-development-plans\">\n                      {teamMembers.filter(member => member.careerGoals && member.careerGoals.trim()).length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Team Members List */}\n            <div className=\"space-y-6\">\n              {membersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Card key={i} className=\"p-6 animate-pulse\">\n                      <div className=\"h-20 bg-slate-200 rounded\"></div>\n                    </Card>\n                  ))}\n                </div>\n              ) : teamMembers.length === 0 ? (\n                <Card className=\"p-12 text-center\">\n                  <i className=\"fas fa-user-friends text-4xl text-slate-300 mb-4\"></i>\n                  <h3 className=\"text-lg font-medium text-slate-600 mb-2\">No team members yet</h3>\n                  <p className=\"text-slate-500 mb-6\">\n                    Start building your team assessment by adding team members\n                  </p>\n                  <Button\n                    onClick={() => setShowMemberModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                  >\n                    <i className=\"fas fa-user-plus mr-2\"></i>\n                    Add First Team Member\n                  </Button>\n                </Card>\n              ) : (\n                teamMembers.map((member) => {\n                  const oneOnOneStatus = getNextOneOnOneStatus(member.nextOneOnOneDate);\n                  \n                  return (\n                    <Card key={member.id} className=\"p-6\" data-testid={`team-member-${member.id}`}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-4 flex-1\">\n                          <div className=\"w-12 h-12 bg-slate-200 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-user text-slate-600\"></i>\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-2\">\n                              <h3 className=\"text-lg font-semibold text-slate-800\">{member.name}</h3>\n                              {member.role && (\n                                <Badge variant=\"outline\" className=\"text-sm\">\n                                  {member.role}\n                                </Badge>\n                              )}\n                              {member.satisfactionScore && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <div className={`w-3 h-3 rounded-full ${getSatisfactionColor(Number(member.satisfactionScore))}`}></div>\n                                  <span className=\"text-sm text-slate-600\">{member.satisfactionScore}/5</span>\n                                </div>\n                              )}\n                            </div>\n                            \n                            {member.email && (\n                              <p className=\"text-slate-600 text-sm mb-3\">\n                                <i className=\"fas fa-envelope mr-2\"></i>\n                                {member.email}\n                              </p>\n                            )}\n\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                              {member.strengths && (\n                                <div>\n                                  <h4 className=\"font-medium text-slate-800 mb-1\">Strengths:</h4>\n                                  <p className=\"text-sm text-slate-600\">{member.strengths}</p>\n                                </div>\n                              )}\n                              \n                              {member.improvementAreas && (\n                                <div>\n                                  <h4 className=\"font-medium text-slate-800 mb-1\">Improvement Areas:</h4>\n                                  <p className=\"text-sm text-slate-600\">{member.improvementAreas}</p>\n                                </div>\n                              )}\n                            </div>\n\n                            {member.careerGoals && (\n                              <div className=\"mb-4\">\n                                <h4 className=\"font-medium text-slate-800 mb-1\">Career Goals:</h4>\n                                <p className=\"text-sm text-slate-600\">{member.careerGoals}</p>\n                              </div>\n                            )}\n\n                            <div className=\"flex items-center space-x-6 text-sm text-slate-600\">\n                              {member.lastOneOnOneDate && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <i className=\"fas fa-calendar text-slate-400\"></i>\n                                  <span>Last 1:1: {new Date(member.lastOneOnOneDate).toLocaleDateString()}</span>\n                                </div>\n                              )}\n                              \n                              <div className=\"flex items-center space-x-2\">\n                                <i className=\"fas fa-calendar-plus text-slate-400\"></i>\n                                <span>Next 1:1:</span>\n                                <Badge className={oneOnOneStatus.color}>\n                                  {oneOnOneStatus.label}\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditMember(member)}\n                            className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                            data-testid={`button-edit-member-${member.id}`}\n                          >\n                            <i className=\"fas fa-edit text-sm\"></i>\n                          </Button>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteTeamMemberMutation.mutate(member.id)}\n                            className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-member-${member.id}`}\n                          >\n                            <i className=\"fas fa-trash text-sm\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <TeamMemberModal \n        open={showMemberModal}\n        onOpenChange={handleCloseModal}\n        member={editingMember}\n      />\n    </>\n  );\n}\n","size_bytes":14196},"client/src/pages/timeline.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { PHASE_DATA } from \"@/types\";\nimport { DashboardStats } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Timeline() {\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Calculate currentDay from overall progress (overallProgress = (currentDay / 90) * 100)\n  const currentDay = Math.round((stats?.overallProgress || 0) * 90 / 100);\n  \n  // Parse phase parameter from URL\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const selectedPhase = urlParams.get('phase');\n\n  const startProgressMutation = useMutation({\n    mutationFn: async (day: number) => {\n      await apiRequest(\"POST\", \"/api/progress/start\", { currentDay: day });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Progress Started\",\n        description: \"Your 90-day leadership transition journey has begun!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start progress tracking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProgressMutation = useMutation({\n    mutationFn: async (day: number) => {\n      await apiRequest(\"PUT\", \"/api/progress/update\", { currentDay: day });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Progress Updated\",\n        description: `Progress updated to day ${currentDay + 1}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update progress\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"flex h-screen bg-slate-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-auto\">\n        <Header\n          title=\"90-Day Timeline\"\n          subtitle=\"Track your progress through the three phases of leadership development\"\n        />\n        \n        <main className=\"p-6\">\n          {/* Overall Progress */}\n          <Card className=\"p-6 mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-slate-800\">Overall Progress</h3>\n                <p className=\"text-slate-600\">Day {currentDay} of 90</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                {currentDay === 0 ? (\n                  <Button\n                    onClick={() => startProgressMutation.mutate(1)}\n                    className=\"bg-success hover:bg-green-700\"\n                    disabled={startProgressMutation.isPending}\n                    data-testid=\"button-start-progress\"\n                  >\n                    <i className=\"fas fa-play mr-2\"></i>\n                    Start Journey\n                  </Button>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() => updateProgressMutation.mutate(currentDay + 1)}\n                      className=\"bg-primary hover:bg-blue-800\"\n                      disabled={updateProgressMutation.isPending || currentDay >= 90}\n                      data-testid=\"button-advance-day\"\n                    >\n                      <i className=\"fas fa-forward mr-2\"></i>\n                      Advance Day\n                    </Button>\n                    <Button\n                      onClick={() => updateProgressMutation.mutate(Math.max(0, currentDay - 1))}\n                      variant=\"outline\"\n                      disabled={updateProgressMutation.isPending || currentDay <= 0}\n                      data-testid=\"button-previous-day\"\n                    >\n                      <i className=\"fas fa-backward mr-2\"></i>\n                      Previous Day\n                    </Button>\n                  </div>\n                )}\n                <div className=\"text-right\">\n                  <p className=\"text-3xl font-bold text-primary\">{Math.round((currentDay / 90) * 100)}%</p>\n                  <p className=\"text-sm text-slate-500\">Complete</p>\n                </div>\n              </div>\n            </div>\n            <Progress value={(currentDay / 90) * 100} className=\"h-3\" />\n          </Card>\n\n          {/* Phase Details */}\n          <div className=\"space-y-6\">\n            {PHASE_DATA.map((phase, index) => {\n              const isCompleted = currentDay > phase.endDay;\n              const isActive = currentDay >= phase.startDay && currentDay <= phase.endDay;\n              const phaseProgress = isCompleted ? 100 : \n                isActive ? ((currentDay - phase.startDay + 1) / (phase.endDay - phase.startDay + 1)) * 100 : 0;\n\n              const isSelectedPhase = selectedPhase === phase.id;\n              \n              return (\n                <Card \n                  key={phase.id} \n                  className={`p-6 ${isSelectedPhase ? 'ring-2 ring-primary bg-blue-50' : ''}`} \n                  data-testid={`phase-detail-${index + 1}`}\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                        isCompleted ? 'bg-success text-white' : \n                        isActive ? 'bg-warning text-white' : \n                        'bg-slate-200 text-slate-500'\n                      }`}>\n                        <i className={`fas ${\n                          isCompleted ? 'fa-check' : \n                          isActive ? 'fa-clock' : \n                          'fa-circle'\n                        }`}></i>\n                      </div>\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-slate-800\">{phase.name}</h3>\n                        <p className=\"text-slate-600 mt-1\">{phase.description}</p>\n                        <p className=\"text-sm text-slate-500 mt-2\">\n                          Days {phase.startDay}-{phase.endDay} ({phase.endDay - phase.startDay + 1} days)\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                        isCompleted ? 'bg-green-100 text-green-800' :\n                        isActive ? 'bg-amber-100 text-amber-800' :\n                        'bg-slate-100 text-slate-600'\n                      }`}>\n                        {isCompleted ? 'Completed' : isActive ? 'In Progress' : 'Upcoming'}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <div className=\"flex justify-between text-sm text-slate-600 mb-2\">\n                      <span>Progress</span>\n                      <span>{Math.round(phaseProgress)}%</span>\n                    </div>\n                    <Progress value={phaseProgress} className=\"h-2\" />\n                  </div>\n\n                  {/* Phase-specific content would go here */}\n                  <div className=\"border-t border-slate-200 pt-4\">\n                    <h4 className=\"font-medium text-slate-800 mb-2\">Key Deliverables:</h4>\n                    <ul className=\"text-sm text-slate-600 space-y-1\">\n                      {index === 0 && (\n                        <>\n                          <li>• Team assessment report with individual development plans</li>\n                          <li>• Process improvement roadmap</li>\n                          <li>• Team charter and working agreements</li>\n                          <li>• Updated documentation and runbooks</li>\n                        </>\n                      )}\n                      {index === 1 && (\n                        <>\n                          <li>• Individual development plans for all team members</li>\n                          <li>• Team OKRs and success metrics</li>\n                          <li>• 6-month technical roadmap</li>\n                          <li>• Cross-functional collaboration framework</li>\n                        </>\n                      )}\n                      {index === 2 && (\n                        <>\n                          <li>• Change management success story</li>\n                          <li>• Executive presentation on team value and roadmap</li>\n                          <li>• Hiring and onboarding framework</li>\n                          <li>• Innovation program implementation</li>\n                        </>\n                      )}\n                    </ul>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9428},"client/src/types/index.ts":{"content":"export interface DashboardStats {\n  overallProgress: number;\n  tasksCompleted: number;\n  totalTasks: number;\n  currentPhase: {\n    id: string;\n    name: string;\n    description: string;\n    startDay: number;\n    endDay: number;\n  } | null;\n  teamSatisfactionAvg: number;\n  learningProgress: number;\n}\n\nexport interface NavigationItem {\n  href: string;\n  icon: string;\n  label: string;\n  isActive?: boolean;\n}\n\nexport interface NavigationSection {\n  title: string;\n  items: NavigationItem[];\n}\n\nexport const PRIORITY_COLORS = {\n  high: \"bg-amber-100 text-amber-800\",\n  medium: \"bg-blue-100 text-blue-800\", \n  low: \"bg-slate-100 text-slate-600\",\n} as const;\n\nexport const STATUS_COLORS = {\n  pending: \"bg-slate-100 text-slate-600\",\n  in_progress: \"bg-amber-100 text-amber-800\",\n  completed: \"bg-green-100 text-green-800\",\n} as const;\n\nexport const PHASE_DATA = [\n  {\n    id: \"phase1\",\n    name: \"Phase 1: Foundation Building\",\n    description: \"Team assessment, quick wins, leadership foundation\",\n    startDay: 1,\n    endDay: 30,\n    orderIndex: 1,\n  },\n  {\n    id: \"phase2\", \n    name: \"Phase 2: Leadership Development\",\n    description: \"People management, strategic thinking, collaboration\",\n    startDay: 31,\n    endDay: 60,\n    orderIndex: 2,\n  },\n  {\n    id: \"phase3\",\n    name: \"Phase 3: Leadership Excellence\", \n    description: \"Change management, scaling, innovation\",\n    startDay: 61,\n    endDay: 90,\n    orderIndex: 3,\n  },\n];\n\nexport const KPI_METRICS = {\n  deploymentFreq: {\n    label: \"Deployment Frequency\",\n    icon: \"fas fa-rocket\",\n    color: \"text-success\",\n    target: \"+20%\",\n  },\n  leadTime: {\n    label: \"Lead Time Reduction\", \n    icon: \"fas fa-clock\",\n    color: \"text-primary\",\n    target: \"-15%\",\n  },\n  mttr: {\n    label: \"MTTR Improvement\",\n    icon: \"fas fa-tools\", \n    color: \"text-warning\",\n    target: \"-25%\",\n  },\n  failureRate: {\n    label: \"Change Failure Rate\",\n    icon: \"fas fa-shield-alt\",\n    color: \"text-accent\", \n    target: \"<5%\",\n  },\n};\n","size_bytes":1986},"client/src/components/checklist/checklist-detail-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport type { Checklist, ChecklistItem } from \"@shared/schema\";\nimport ChecklistItemModal from \"../checklist/checklist-item-modal\";\n\ninterface ChecklistDetailViewProps {\n  checklist: Checklist;\n  onBack: () => void;\n  onChecklistUpdated: (checklist: Checklist) => void;\n}\n\nexport default function ChecklistDetailView({ \n  checklist, \n  onBack, \n  onChecklistUpdated \n}: ChecklistDetailViewProps) {\n  const [showItemModal, setShowItemModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<ChecklistItem | undefined>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: items = [], isLoading } = useQuery<ChecklistItem[]>({\n    queryKey: [\"/api/checklists\", checklist.id, \"items\"],\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async ({ itemId, updates }: { itemId: string; updates: Partial<ChecklistItem> }) => {\n      await apiRequest(\"PUT\", `/api/checklist-items/${itemId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\", checklist.id, \"items\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item updated successfully\",\n      });\n    },\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      await apiRequest(\"DELETE\", `/api/checklist-items/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\", checklist.id, \"items\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item deleted successfully\",\n      });\n    },\n  });\n\n  const completedItems = items.filter(item => item.completed).length;\n  const progressPercentage = items.length > 0 ? Math.round((completedItems / items.length) * 100) : 0;\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-orange-100 text-orange-800\";\n      case \"low\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string | Date) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const toggleItemCompleted = (item: ChecklistItem) => {\n    updateItemMutation.mutate({\n      itemId: item.id,\n      updates: { completed: !item.completed }\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <div className=\"flex-1 overflow-auto\">\n          <main className=\"p-8\">\n            <div className=\"max-w-5xl mx-auto\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={onBack}\n                    data-testid=\"button-back-to-checklists\"\n                  >\n                    <i className=\"fas fa-arrow-left mr-2\"></i>\n                    Back to Checklists\n                  </Button>\n                  <div className=\"flex-1\">\n                    <h1 className=\"text-3xl font-bold text-slate-900\">{checklist.name}</h1>\n                    {checklist.description && (\n                      <p className=\"text-slate-600 mt-2\">{checklist.description}</p>\n                    )}\n                  </div>\n                  <Button\n                    onClick={() => setShowItemModal(true)}\n                    className=\"bg-primary hover:bg-blue-800\"\n                    data-testid=\"button-add-item\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Item\n                  </Button>\n                </div>\n\n                {/* Progress Card */}\n                <Card className=\"p-6 mb-6\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-semibold text-slate-800\">Progress Overview</h3>\n                    <Badge variant=\"outline\" className=\"text-sm\">\n                      {completedItems} of {items.length} completed\n                    </Badge>\n                  </div>\n                  <Progress value={progressPercentage} className=\"h-3 mb-2\" />\n                  <div className=\"flex justify-between text-sm text-slate-600\">\n                    <span>{progressPercentage}% Complete</span>\n                    <span>Created {formatDate(checklist.createdAt)}</span>\n                  </div>\n                </Card>\n              </div>\n\n              {/* Items List */}\n              <div className=\"space-y-4\">\n                {items.length === 0 ? (\n                  <Card className=\"p-12 text-center\">\n                    <div className=\"max-w-md mx-auto\">\n                      <i className=\"fas fa-list text-4xl text-slate-300 mb-4\"></i>\n                      <h3 className=\"text-lg font-medium text-slate-800 mb-2\">\n                        No Items Yet\n                      </h3>\n                      <p className=\"text-slate-600 mb-4\">\n                        Start adding items to this checklist to track your progress.\n                      </p>\n                      <Button\n                        onClick={() => setShowItemModal(true)}\n                        className=\"bg-primary hover:bg-blue-800\"\n                        data-testid=\"button-add-first-item\"\n                      >\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Add First Item\n                      </Button>\n                    </div>\n                  </Card>\n                ) : (\n                  items.map((item: ChecklistItem) => (\n                    <Card \n                      key={item.id} \n                      className={`p-4 transition-all ${\n                        item.completed ? \"bg-green-50 border-green-200\" : \"bg-white\"\n                      }`}\n                      data-testid={`checklist-item-${item.id}`}\n                    >\n                      <div className=\"flex items-start gap-4\">\n                        <Checkbox\n                          checked={item.completed}\n                          onCheckedChange={() => toggleItemCompleted(item)}\n                          className=\"mt-1\"\n                          data-testid={`checkbox-item-${item.id}`}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <p \n                              className={`text-sm font-medium ${\n                                item.completed \n                                  ? \"line-through text-slate-500\" \n                                  : \"text-slate-800\"\n                              }`}\n                            >\n                              {item.text}\n                            </p>\n                            <Badge className={getPriorityColor(item.priority || \"medium\")}>\n                              {(item.priority || \"medium\").toUpperCase()}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs text-slate-500\">\n                            Added {formatDate(item.createdAt)}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingItem(item);\n                              setShowItemModal(true);\n                            }}\n                            data-testid={`button-edit-item-${item.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(\"Are you sure you want to delete this item?\")) {\n                                deleteItemMutation.mutate(item.id);\n                              }\n                            }}\n                            className=\"text-red-600 hover:text-red-800 hover:bg-red-50\"\n                            data-testid={`button-delete-item-${item.id}`}\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n\n      <ChecklistItemModal \n        open={showItemModal}\n        onOpenChange={(open: boolean) => {\n          setShowItemModal(open);\n          if (!open) setEditingItem(undefined);\n        }}\n        checklistId={checklist.id}\n        item={editingItem}\n      />\n    </>\n  );\n}","size_bytes":9960},"client/src/components/checklist/checklist-item-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertChecklistItemSchema, type InsertChecklistItem, type ChecklistItem } from \"@shared/schema\";\n\ninterface ChecklistItemModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  checklistId: string;\n  item?: ChecklistItem;\n}\n\nexport default function ChecklistItemModal({ \n  open, \n  onOpenChange, \n  checklistId, \n  item \n}: ChecklistItemModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertChecklistItem>({\n    resolver: zodResolver(insertChecklistItemSchema),\n    defaultValues: {\n      text: item?.text || \"\",\n      completed: item?.completed || false,\n      priority: item?.priority || \"medium\",\n      order: item?.order || 0,\n    },\n  });\n\n  const createItemMutation = useMutation({\n    mutationFn: async (itemData: InsertChecklistItem) => {\n      if (item) {\n        await apiRequest(\"PUT\", `/api/checklist-items/${item.id}`, itemData);\n      } else {\n        await apiRequest(\"POST\", `/api/checklists/${checklistId}/items`, itemData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\", checklistId, \"items\"] });\n      toast({\n        title: \"Success\",\n        description: `Item ${item ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${item ? 'update' : 'create'} item`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertChecklistItem) => {\n    setIsSubmitting(true);\n    createItemMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"checklist-item-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {item ? \"Edit Checklist Item\" : \"Add New Item\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"text\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Item Text *\n            </Label>\n            <Input\n              id=\"text\"\n              {...form.register(\"text\")}\n              placeholder=\"e.g. Set up development environment\"\n              className=\"w-full\"\n              data-testid=\"input-item-text\"\n            />\n            {form.formState.errors.text && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.text.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"priority\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Priority\n            </Label>\n            <Select \n              onValueChange={(value) => form.setValue(\"priority\", value as \"low\" | \"medium\" | \"high\")} \n              defaultValue={form.getValues(\"priority\") || \"medium\"}\n            >\n              <SelectTrigger data-testid=\"select-item-priority\">\n                <SelectValue placeholder=\"Select priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"completed\"\n              checked={form.watch(\"completed\")}\n              onCheckedChange={(checked) => form.setValue(\"completed\", !!checked)}\n              data-testid=\"checkbox-item-completed\"\n            />\n            <Label htmlFor=\"completed\" className=\"text-sm font-medium text-slate-700\">\n              Mark as completed\n            </Label>\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-item\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-item\"\n            >\n              {isSubmitting ? \"Saving...\" : `${item ? 'Update' : 'Add'} Item`}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5401},"client/src/components/dashboard/kpi-metrics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { KpiMetric } from \"@shared/schema\";\nimport { KPI_METRICS } from \"@/types\";\n\nexport default function KpiMetrics() {\n  const { data: metrics = [], isLoading } = useQuery<KpiMetric[]>({\n    queryKey: [\"/api/kpi-metrics\"],\n  });\n\n  // Group metrics by type and get latest value for each\n  const latestMetrics = metrics.reduce((acc, metric) => {\n    if (!acc[metric.metricType] || new Date(metric.recordedAt) > new Date(acc[metric.metricType].recordedAt)) {\n      acc[metric.metricType] = metric;\n    }\n    return acc;\n  }, {} as Record<string, KpiMetric>);\n\n  const kpiData = [\n    {\n      key: \"deploymentFreq\",\n      title: \"Deployment Frequency\",\n      icon: \"fas fa-rocket\",\n      color: \"text-success\",\n      bgColor: \"bg-green-100\",\n      value: latestMetrics[\"deployment_frequency\"]?.value || \"+18%\",\n      target: \"+20%\",\n    },\n    {\n      key: \"leadTime\", \n      title: \"Lead Time Reduction\",\n      icon: \"fas fa-clock\",\n      color: \"text-primary\",\n      bgColor: \"bg-blue-100\",\n      value: latestMetrics[\"lead_time\"]?.value || \"-12%\",\n      target: \"-15%\",\n    },\n    {\n      key: \"mttr\",\n      title: \"MTTR Improvement\", \n      icon: \"fas fa-tools\",\n      color: \"text-warning\",\n      bgColor: \"bg-amber-100\",\n      value: latestMetrics[\"mttr\"]?.value || \"-20%\",\n      target: \"-25%\",\n    },\n    {\n      key: \"failureRate\",\n      title: \"Change Failure Rate\",\n      icon: \"fas fa-shield-alt\", \n      color: \"text-accent\",\n      bgColor: \"bg-red-100\",\n      value: latestMetrics[\"failure_rate\"]?.value || \"3.2%\",\n      target: \"<5%\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <Card className=\"mt-8 p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-slate-200 rounded mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"text-center\">\n                <div className=\"w-20 h-20 bg-slate-200 rounded-full mx-auto mb-3\"></div>\n                <div className=\"h-4 bg-slate-200 rounded mb-2\"></div>\n                <div className=\"h-6 bg-slate-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-slate-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mt-8 p-6\" data-testid=\"kpi-metrics\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">Key Performance Indicators</h3>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-600 hover:text-slate-800 bg-slate-100\">\n            Week\n          </Button>\n          <Button size=\"sm\" className=\"bg-primary text-white\">\n            Month\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-600 hover:text-slate-800 bg-slate-100\">\n            Quarter\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {kpiData.map((kpi) => (\n          <div key={kpi.key} className=\"text-center\" data-testid={`kpi-${kpi.key}`}>\n            <div className={`w-20 h-20 ${kpi.bgColor} rounded-full flex items-center justify-center mx-auto mb-3`}>\n              <i className={`${kpi.icon} ${kpi.color} text-2xl`}></i>\n            </div>\n            <h4 className=\"font-semibold text-slate-800\">{kpi.title}</h4>\n            <p className=\"text-2xl font-bold text-slate-800 mt-2\" data-testid={`text-${kpi.key}-value`}>\n              {kpi.value}\n            </p>\n            <p className={`text-sm ${kpi.color}`}>\n              Target: {kpi.target}\n            </p>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3913},"client/src/components/dashboard/progress-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { DashboardStats } from \"@/types\";\n\nexport default function ProgressOverview() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"p-6 animate-pulse\">\n            <div className=\"h-20 bg-slate-200 rounded\"></div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const progressCards = [\n    {\n      title: \"Overall Progress\",\n      value: `${stats?.overallProgress || 0}%`,\n      icon: \"fas fa-chart-pie\",\n      iconColor: \"text-primary\",\n      bgColor: \"bg-blue-100\",\n      progressWidth: `${stats?.overallProgress || 0}%`,\n      progressColor: \"bg-primary\",\n      subtitle: \"Day 0 of 90\",\n    },\n    {\n      title: \"Tasks Completed\",\n      value: `${stats?.tasksCompleted || 0}/${stats?.totalTasks || 0}`,\n      icon: \"fas fa-check-circle\",\n      iconColor: \"text-success\",\n      bgColor: \"bg-green-100\",\n      progressWidth: `${stats?.totalTasks ? (stats.tasksCompleted / stats.totalTasks) * 100 : 0}%`,\n      progressColor: \"bg-success\",\n      subtitle: \"+3 this week\",\n      subtitleColor: \"text-success\",\n    },\n    {\n      title: \"Team Satisfaction\",\n      value: `${stats?.teamSatisfactionAvg.toFixed(1) || '0.0'}/5`,\n      icon: \"fas fa-star\",\n      iconColor: \"text-warning\",\n      bgColor: \"bg-amber-100\",\n      progressWidth: `${((stats?.teamSatisfactionAvg || 0) / 5) * 100}%`,\n      progressColor: \"bg-warning\",\n      subtitle: \"Target: 4.2+\",\n      subtitleColor: \"text-warning\",\n    },\n    {\n      title: \"Learning Progress\",\n      value: `${Math.round(stats?.learningProgress || 0)}%`,\n      icon: \"fas fa-graduation-cap\",\n      iconColor: \"text-purple-600\",\n      bgColor: \"bg-purple-100\",\n      progressWidth: `${stats?.learningProgress || 0}%`,\n      progressColor: \"bg-purple-600\",\n      subtitle: \"3/5 books completed\",\n      subtitleColor: \"text-purple-600\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"progress-overview\">\n      {progressCards.map((card, index) => (\n        <Card key={index} className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-slate-600 text-sm font-medium\">{card.title}</p>\n              <p className=\"text-3xl font-bold text-slate-800 mt-2\" data-testid={`text-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {card.value}\n              </p>\n            </div>\n            <div className={`w-12 h-12 ${card.bgColor} rounded-full flex items-center justify-center`}>\n              <i className={`${card.icon} ${card.iconColor} text-xl`}></i>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"bg-slate-200 rounded-full h-2\">\n              <div \n                className={`${card.progressColor} rounded-full h-2 transition-all duration-500`}\n                style={{ width: card.progressWidth }}\n              ></div>\n            </div>\n            <p className={`text-xs mt-2 ${card.subtitleColor || 'text-slate-500'}`}>\n              {card.subtitle}\n            </p>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3443},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport TaskModal from \"@/components/forms/task-modal\";\nimport { Link } from \"wouter\";\n\nexport default function QuickActions() {\n  const [showTaskModal, setShowTaskModal] = useState(false);\n\n  const quickActions = [\n    {\n      id: \"schedule-1on1\",\n      icon: \"fas fa-calendar-plus\",\n      color: \"text-primary\",\n      hoverColor: \"hover:border-primary hover:bg-blue-50\",\n      label: \"Schedule 1:1\",\n      href: \"/team\",\n    },\n    {\n      id: \"weekly-assessment\", \n      icon: \"fas fa-clipboard-check\",\n      color: \"text-success\",\n      hoverColor: \"hover:border-success hover:bg-green-50\",\n      label: \"Weekly Assessment\",\n      href: \"/assessment\",\n    },\n    {\n      id: \"log-learning\",\n      icon: \"fas fa-book-open\", \n      color: \"text-warning\",\n      hoverColor: \"hover:border-warning hover:bg-amber-50\",\n      label: \"Log Learning\",\n      href: \"/learning\",\n    },\n    {\n      id: \"update-metrics\",\n      icon: \"fas fa-chart-bar\",\n      color: \"text-purple-600\", \n      hoverColor: \"hover:border-purple-600 hover:bg-purple-50\",\n      label: \"Update Metrics\",\n      href: \"/metrics\",\n    },\n    {\n      id: \"add-risk\",\n      icon: \"fas fa-exclamation-triangle\",\n      color: \"text-accent\",\n      hoverColor: \"hover:border-accent hover:bg-red-50\", \n      label: \"Add Risk\",\n      href: \"/risks\",\n    },\n    {\n      id: \"add-note\",\n      icon: \"fas fa-sticky-note\",\n      color: \"text-slate-600\",\n      hoverColor: \"hover:border-slate-600 hover:bg-slate-50\",\n      label: \"Add Note\",\n      onClick: () => setShowTaskModal(true),\n    },\n  ];\n\n  return (\n    <>\n      <Card className=\"p-6\" data-testid=\"quick-actions\">\n        <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">Quick Actions</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          {quickActions.map((action) => {\n            const ActionComponent = action.href ? Link : \"button\";\n            \n            return (\n              <ActionComponent\n                key={action.id}\n                {...(action.href ? { href: action.href } : { onClick: action.onClick })}\n                className={`p-4 border border-slate-200 rounded-lg ${action.hoverColor} transition-colors group cursor-pointer block text-center`}\n                data-testid={`button-${action.id}`}\n              >\n                <i className={`${action.icon} ${action.color} text-xl mb-2 group-hover:scale-110 transition-transform`}></i>\n                <p className=\"text-sm font-medium text-slate-800\">{action.label}</p>\n              </ActionComponent>\n            );\n          })}\n        </div>\n\n        {/* File upload area */}\n        <div className=\"mt-6 p-4 border-2 border-dashed border-slate-300 rounded-lg hover:border-primary transition-colors cursor-pointer group\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-cloud-upload-alt text-slate-400 group-hover:text-primary text-2xl mb-2 transition-colors\"></i>\n            <p className=\"text-sm text-slate-600 group-hover:text-slate-800 transition-colors\">\n              Upload documents or progress reports\n            </p>\n            <p className=\"text-xs text-slate-400 mt-1\">PDF, DOC, or images</p>\n          </div>\n        </div>\n      </Card>\n\n      <TaskModal \n        open={showTaskModal}\n        onOpenChange={setShowTaskModal}\n      />\n    </>\n  );\n}\n","size_bytes":3394},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Activity } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst getActivityIcon = (type: string) => {\n  switch (type) {\n    case \"task_completed\":\n      return { icon: \"w-2 h-2 bg-success rounded-full\", color: \"text-success\" };\n    case \"task_created\":\n      return { icon: \"w-2 h-2 bg-primary rounded-full\", color: \"text-primary\" };\n    case \"learning_completed\":\n      return { icon: \"w-2 h-2 bg-success rounded-full\", color: \"text-success\" };\n    case \"learning_resource_added\":\n      return { icon: \"w-2 h-2 bg-purple-600 rounded-full\", color: \"text-purple-600\" };\n    case \"team_member_added\":\n      return { icon: \"w-2 h-2 bg-warning rounded-full\", color: \"text-warning\" };\n    case \"weekly_assessment\":\n      return { icon: \"w-2 h-2 bg-blue-600 rounded-full\", color: \"text-blue-600\" };\n    case \"metric_recorded\":\n      return { icon: \"w-2 h-2 bg-primary rounded-full\", color: \"text-primary\" };\n    case \"risk_identified\":\n      return { icon: \"w-2 h-2 bg-accent rounded-full\", color: \"text-accent\" };\n    default:\n      return { icon: \"w-2 h-2 bg-slate-400 rounded-full\", color: \"text-slate-400\" };\n  }\n};\n\nexport default function RecentActivity() {\n  const { data: activities = [], isLoading } = useQuery<Activity[]>({\n    queryKey: [\"/api/activities\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-slate-200 rounded mb-6\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-slate-200 rounded-full mt-2\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-slate-200 rounded mb-1\"></div>\n                  <div className=\"h-3 bg-slate-200 rounded w-1/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6\" data-testid=\"recent-activity\">\n      <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">Recent Activity</h3>\n      \n      <div className=\"space-y-4\">\n        {activities.slice(0, 6).map((activity) => {\n          const iconConfig = getActivityIcon(activity.type);\n          \n          return (\n            <div key={activity.id} className=\"flex items-start space-x-3\" data-testid={`activity-${activity.id}`}>\n              <div className={iconConfig.icon + \" mt-2\"}></div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-slate-800\">{activity.description}</p>\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n        \n        {activities.length === 0 && (\n          <div className=\"text-center py-8 text-slate-500\">\n            <i className=\"fas fa-history text-3xl mb-4\"></i>\n            <p>No recent activity</p>\n            <p className=\"text-sm\">Your actions will appear here</p>\n          </div>\n        )}\n      </div>\n\n      <Button \n        variant=\"ghost\"\n        className=\"w-full mt-4 text-slate-600 hover:text-slate-800\"\n        data-testid=\"button-view-all-activity\"\n      >\n        View All Activity\n      </Button>\n    </Card>\n  );\n}\n","size_bytes":3557},"client/src/components/dashboard/timeline-widget.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { PHASE_DATA } from \"@/types\";\nimport { DashboardStats } from \"@/types\";\nimport { Link } from \"wouter\";\n\nexport default function TimelineWidget() {\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Calculate currentDay from overall progress (overallProgress = (currentDay / 90) * 100)\n  const currentDay = Math.round((stats?.overallProgress || 0) * 90 / 100);\n\n  const getPhaseStatus = (phase: typeof PHASE_DATA[0]) => {\n    if (currentDay > phase.endDay) {\n      return { status: \"completed\", color: \"success\", icon: \"fas fa-check\" };\n    } else if (currentDay >= phase.startDay && currentDay <= phase.endDay) {\n      return { status: \"in_progress\", color: \"warning\", icon: \"fas fa-clock\" };\n    } else {\n      return { status: \"upcoming\", color: \"slate\", icon: \"fas fa-trophy\" };\n    }\n  };\n\n  const getProgressWidth = (phase: typeof PHASE_DATA[0]) => {\n    if (currentDay <= phase.startDay) return \"0%\";\n    if (currentDay >= phase.endDay) return \"100%\";\n    \n    const phaseProgress = ((currentDay - phase.startDay + 1) / (phase.endDay - phase.startDay + 1)) * 100;\n    return `${Math.min(100, Math.max(0, phaseProgress))}%`;\n  };\n\n  return (\n    <Card className=\"p-6\" data-testid=\"timeline-widget\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-slate-800\">90-Day Timeline</h3>\n        <Link href=\"/timeline\">\n          <Button variant=\"ghost\" className=\"text-primary hover:text-blue-800 text-sm font-medium\">\n            View Details\n          </Button>\n        </Link>\n      </div>\n      \n      <div className=\"space-y-6\">\n        {PHASE_DATA.map((phase) => {\n          const phaseStatus = getPhaseStatus(phase);\n          const progressWidth = getProgressWidth(phase);\n          \n          const statusConfig = {\n            completed: {\n              badge: \"bg-green-100 text-green-800\",\n              label: \"Completed\",\n              progressColor: \"bg-success\",\n            },\n            in_progress: {\n              badge: \"bg-amber-100 text-amber-800\", \n              label: \"In Progress\",\n              progressColor: \"bg-warning\",\n            },\n            upcoming: {\n              badge: \"bg-slate-100 text-slate-600\",\n              label: \"Upcoming\", \n              progressColor: \"bg-slate-400\",\n            },\n          };\n\n          const config = statusConfig[phaseStatus.status as keyof typeof statusConfig];\n          \n          return (\n            <div key={phase.id} className=\"flex items-start space-x-4\" data-testid={`phase-${phase.orderIndex}`}>\n              <div className=\"flex-shrink-0\">\n                <div className={`w-8 h-8 bg-${phaseStatus.color === 'slate' ? 'slate-300' : phaseStatus.color === 'warning' ? 'warning' : 'success'} rounded-full flex items-center justify-center`}>\n                  <i className={`${phaseStatus.icon} text-white text-sm`}></i>\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-semibold text-slate-800\">{phase.name}</h4>\n                  <span className={`text-xs px-2 py-1 rounded-full ${config.badge}`}>\n                    {config.label}\n                  </span>\n                </div>\n                <p className=\"text-slate-600 text-sm mt-1\">\n                  Days {phase.startDay}-{phase.endDay} • {phase.description}\n                </p>\n                <div className=\"mt-2\">\n                  <div className=\"bg-slate-200 rounded-full h-2\">\n                    <div \n                      className={`${config.progressColor} rounded-full h-2 transition-all duration-500`}\n                      style={{ width: progressWidth }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4101},"client/src/components/dashboard/upcoming-tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Task } from \"@shared/schema\";\nimport { PRIORITY_COLORS } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TaskModal from \"@/components/forms/task-modal\";\nimport { Link } from \"wouter\";\n\nexport default function UpcomingTasks() {\n  const [showTaskModal, setShowTaskModal] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tasks = [], isLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/upcoming\"],\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, updates }: { taskId: string; updates: Partial<Task> }) => {\n      await apiRequest(\"PUT\", `/api/tasks/${taskId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTaskComplete = (task: Task, completed: boolean) => {\n    updateTaskMutation.mutate({\n      taskId: task.id,\n      updates: {\n        status: completed ? \"completed\" : \"pending\",\n        completedAt: completed ? new Date() : null,\n      },\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-slate-200 rounded mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-slate-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"p-6\" data-testid=\"upcoming-tasks\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">This Week's Focus</h3>\n          <Link href=\"/tasks\">\n            <Button variant=\"ghost\" className=\"text-primary hover:text-blue-800 text-sm font-medium\">\n              View All\n            </Button>\n          </Link>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {tasks.slice(0, 4).map((task) => (\n            <div key={task.id} className=\"flex items-start space-x-3 p-3 bg-slate-50 rounded-lg\" data-testid={`task-${task.id}`}>\n              <Checkbox\n                checked={task.status === \"completed\"}\n                onCheckedChange={(checked) => handleTaskComplete(task, !!checked)}\n                className=\"mt-1\"\n                data-testid={`checkbox-task-${task.id}`}\n              />\n              <div className=\"flex-1\">\n                <p className={`text-sm font-medium ${task.status === \"completed\" ? \"text-slate-500 line-through\" : \"text-slate-800\"}`}>\n                  {task.title}\n                </p>\n                <p className=\"text-xs text-slate-600 mt-1\">\n                  {task.phaseId ? `Phase ${task.phaseId}` : \"General\"} • \n                  {task.dueDate ? ` Due ${new Date(task.dueDate).toLocaleDateString()}` : \" No due date\"}\n                </p>\n              </div>\n              <span className={`text-xs px-2 py-1 rounded-full ${PRIORITY_COLORS[task.priority as keyof typeof PRIORITY_COLORS]}`}>\n                {task.priority}\n              </span>\n            </div>\n          ))}\n          \n          {tasks.length === 0 && (\n            <div className=\"text-center py-8 text-slate-500\">\n              <i className=\"fas fa-tasks text-3xl mb-4\"></i>\n              <p>No upcoming tasks</p>\n              <p className=\"text-sm\">Create your first task to get started</p>\n            </div>\n          )}\n        </div>\n\n        <Button \n          onClick={() => setShowTaskModal(true)}\n          variant=\"outline\"\n          className=\"w-full mt-4 text-primary hover:text-blue-800 border-primary hover:bg-blue-50 transition-colors\"\n          data-testid=\"button-add-task\"\n        >\n          Add New Task\n        </Button>\n      </Card>\n\n      <TaskModal \n        open={showTaskModal}\n        onOpenChange={setShowTaskModal}\n      />\n    </>\n  );\n}\n","size_bytes":4602},"client/src/components/forms/assessment-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertWeeklyAssessmentSchema, type InsertWeeklyAssessment, type WeeklyAssessment } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { startOfWeek, format } from \"date-fns\";\n\ninterface AssessmentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  assessment?: WeeklyAssessment | null;\n}\n\nexport default function AssessmentModal({ open, onOpenChange, assessment }: AssessmentModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current week start date\n  const currentWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\n\n  const form = useForm<InsertWeeklyAssessment>({\n    resolver: zodResolver(insertWeeklyAssessmentSchema),\n    defaultValues: {\n      weekStartDate: assessment?.weekStartDate || format(currentWeekStart, 'yyyy-MM-dd'),\n      leadershipSkillsPractice: assessment?.leadershipSkillsPractice || \"\",\n      teamSupportEfforts: assessment?.teamSupportEfforts || \"\",\n      strategicInitiatives: assessment?.strategicInitiatives || \"\",\n      stakeholderCommunication: assessment?.stakeholderCommunication || \"\",\n      improvementAreas: assessment?.improvementAreas || \"\",\n      overallRating: assessment?.overallRating || 3,\n    },\n  });\n\n  const createAssessmentMutation = useMutation({\n    mutationFn: async (assessmentData: InsertWeeklyAssessment) => {\n      if (assessment) {\n        await apiRequest(\"PUT\", `/api/weekly-assessments/${assessment.id}`, assessmentData);\n      } else {\n        await apiRequest(\"POST\", \"/api/weekly-assessments\", assessmentData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-assessments\"] });\n      toast({\n        title: \"Success\",\n        description: `Assessment ${assessment ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${assessment ? 'update' : 'create'} assessment`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertWeeklyAssessment) => {\n    setIsSubmitting(true);\n    createAssessmentMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"assessment-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {assessment ? \"Edit Weekly Assessment\" : \"Weekly Self-Assessment\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"weekStartDate\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Week Starting *\n            </Label>\n            <Input\n              id=\"weekStartDate\"\n              type=\"date\"\n              {...form.register(\"weekStartDate\")}\n              className=\"w-full\"\n              data-testid=\"input-assessment-week-start\"\n            />\n            {form.formState.errors.weekStartDate && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.weekStartDate.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"leadershipSkillsPractice\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <i className=\"fas fa-user-tie mr-2\"></i>\n                What leadership skills did I practice this week?\n              </Label>\n              <Textarea\n                id=\"leadershipSkillsPractice\"\n                {...form.register(\"leadershipSkillsPractice\")}\n                placeholder=\"Describe the leadership skills you practiced and how you demonstrated growth...\"\n                rows={4}\n                className=\"w-full\"\n                data-testid=\"textarea-leadership-skills\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"teamSupportEfforts\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <i className=\"fas fa-users mr-2\"></i>\n                How did I support my team members' growth?\n              </Label>\n              <Textarea\n                id=\"teamSupportEfforts\"\n                {...form.register(\"teamSupportEfforts\")}\n                placeholder=\"Detail how you supported team members, conducted 1:1s, provided feedback, etc...\"\n                rows={4}\n                className=\"w-full\"\n                data-testid=\"textarea-team-support\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"strategicInitiatives\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <i className=\"fas fa-chess mr-2\"></i>\n                What strategic initiatives did I advance?\n              </Label>\n              <Textarea\n                id=\"strategicInitiatives\"\n                {...form.register(\"strategicInitiatives\")}\n                placeholder=\"Describe strategic projects, process improvements, or long-term planning work...\"\n                rows={4}\n                className=\"w-full\"\n                data-testid=\"textarea-strategic-initiatives\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"stakeholderCommunication\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <i className=\"fas fa-comments mr-2\"></i>\n                How effectively did I communicate with stakeholders?\n              </Label>\n              <Textarea\n                id=\"stakeholderCommunication\"\n                {...form.register(\"stakeholderCommunication\")}\n                placeholder=\"Reflect on your communication with other teams, management, and external stakeholders...\"\n                rows={4}\n                className=\"w-full\"\n                data-testid=\"textarea-stakeholder-communication\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"improvementAreas\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                <i className=\"fas fa-target mr-2\"></i>\n                What would I do differently next week?\n              </Label>\n              <Textarea\n                id=\"improvementAreas\"\n                {...form.register(\"improvementAreas\")}\n                placeholder=\"Identify areas for improvement and specific actions for next week...\"\n                rows={4}\n                className=\"w-full\"\n                data-testid=\"textarea-improvement-areas\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"overallRating\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Overall Rating (1-5)\n            </Label>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                id=\"overallRating\"\n                type=\"number\"\n                min=\"1\"\n                max=\"5\"\n                {...form.register(\"overallRating\", { valueAsNumber: true })}\n                className=\"w-20\"\n                data-testid=\"input-overall-rating\"\n              />\n              <div className=\"text-sm text-slate-600\">\n                <span className=\"font-medium\">Scale:</span> 1 = Poor, 2 = Needs Improvement, 3 = Fair, 4 = Good, 5 = Excellent\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-assessment\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-assessment\"\n            >\n              {isSubmitting ? \"Saving...\" : assessment ? \"Update Assessment\" : \"Complete Assessment\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8805},"client/src/components/forms/checklist-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertChecklistSchema, type InsertChecklist, type Checklist } from \"@shared/schema\";\n\ninterface ChecklistModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  checklist?: Checklist;\n}\n\nexport default function ChecklistModal({ open, onOpenChange, checklist }: ChecklistModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertChecklist>({\n    resolver: zodResolver(insertChecklistSchema),\n    defaultValues: {\n      name: checklist?.name || \"\",\n      description: checklist?.description || \"\",\n    },\n  });\n\n  const createChecklistMutation = useMutation({\n    mutationFn: async (checklistData: InsertChecklist) => {\n      if (checklist) {\n        await apiRequest(\"PUT\", `/api/checklists/${checklist.id}`, checklistData);\n      } else {\n        await apiRequest(\"POST\", \"/api/checklists\", checklistData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/checklists\"] });\n      toast({\n        title: \"Success\",\n        description: `Checklist ${checklist ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${checklist ? 'update' : 'create'} checklist`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertChecklist) => {\n    setIsSubmitting(true);\n    createChecklistMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"checklist-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {checklist ? \"Edit Checklist\" : \"Create New Checklist\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Checklist Name *\n            </Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              placeholder=\"e.g. DevOps Team Onboarding Process\"\n              className=\"w-full\"\n              data-testid=\"input-checklist-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Description (Optional)\n            </Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Describe the purpose and scope of this checklist...\"\n              className=\"w-full min-h-[100px]\"\n              data-testid=\"input-checklist-description\"\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-checklist\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-checklist\"\n            >\n              {isSubmitting ? \"Saving...\" : `${checklist ? 'Update' : 'Create'} Checklist`}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4589},"client/src/components/forms/follow-up-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertFollowUpSchema, type InsertFollowUp, type FollowUp } from \"@shared/schema\";\n\ninterface FollowUpModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  followUp?: FollowUp;\n}\n\nexport default function FollowUpModal({ open, onOpenChange, followUp }: FollowUpModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertFollowUp>({\n    resolver: zodResolver(insertFollowUpSchema),\n    defaultValues: {\n      title: followUp?.title || \"\",\n      assignee: followUp?.assignee || \"\",\n      dueDate: followUp?.dueDate ? new Date(followUp.dueDate).toISOString().split('T')[0] : \"\",\n      requester: followUp?.requester || \"\",\n      status: followUp?.status || \"pending\",\n      lastCheckIn: followUp?.lastCheckIn ? new Date(followUp.lastCheckIn).toISOString().split('T')[0] : \"\",\n      person: followUp?.person || \"\",\n      priority: followUp?.priority || \"medium\",\n    },\n  });\n\n  const createFollowUpMutation = useMutation({\n    mutationFn: async (followUpData: InsertFollowUp) => {\n      if (followUp) {\n        await apiRequest(\"PUT\", `/api/follow-ups/${followUp.id}`, followUpData);\n      } else {\n        await apiRequest(\"POST\", \"/api/follow-ups\", followUpData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/follow-ups\"] });\n      toast({\n        title: \"Success\",\n        description: `Follow-up ${followUp ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${followUp ? 'update' : 'create'} follow-up`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertFollowUp) => {\n    setIsSubmitting(true);\n    createFollowUpMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"followup-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {followUp ? \"Edit Follow-up\" : \"Create New Follow-up\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Title *\n            </Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              placeholder=\"e.g. Follow up on project timeline with stakeholders\"\n              className=\"w-full\"\n              data-testid=\"input-followup-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Assignee *\n              </Label>\n              <Input\n                id=\"assignee\"\n                {...form.register(\"assignee\")}\n                placeholder=\"Who is responsible for this follow-up\"\n                className=\"w-full\"\n                data-testid=\"input-followup-assignee\"\n              />\n              {form.formState.errors.assignee && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.assignee.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"requester\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Requester *\n              </Label>\n              <Input\n                id=\"requester\"\n                {...form.register(\"requester\")}\n                placeholder=\"Who requested this follow-up\"\n                className=\"w-full\"\n                data-testid=\"input-followup-requester\"\n              />\n              {form.formState.errors.requester && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.requester.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"dueDate\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Due Date *\n              </Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                {...form.register(\"dueDate\")}\n                className=\"w-full\"\n                data-testid=\"input-followup-due-date\"\n              />\n              {form.formState.errors.dueDate && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.dueDate.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"lastCheckIn\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Last Check-in\n              </Label>\n              <Input\n                id=\"lastCheckIn\"\n                type=\"date\"\n                {...form.register(\"lastCheckIn\")}\n                className=\"w-full\"\n                data-testid=\"input-followup-last-checkin\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"status\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Status\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"status\", value)} defaultValue={form.getValues(\"status\") || undefined}>\n                <SelectTrigger data-testid=\"select-followup-status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"awaiting_response\">Awaiting Response</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"priority\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Priority\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"priority\", value)} defaultValue={form.getValues(\"priority\") || undefined}>\n                <SelectTrigger data-testid=\"select-followup-priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"person\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Person (Optional)\n            </Label>\n            <Input\n              id=\"person\"\n              {...form.register(\"person\")}\n              placeholder=\"Additional person involved in this follow-up\"\n              className=\"w-full\"\n              data-testid=\"input-followup-person\"\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-followup\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-followup\"\n            >\n              {isSubmitting ? \"Saving...\" : \"Save Follow-up\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8852},"client/src/components/forms/learning-resource-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertLearningResourceSchema, type InsertLearningResource, type LearningResource } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LearningResourceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  resource?: LearningResource | null;\n}\n\nexport default function LearningResourceModal({ open, onOpenChange, resource }: LearningResourceModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertLearningResource>({\n    resolver: zodResolver(insertLearningResourceSchema),\n    defaultValues: {\n      title: resource?.title || \"\",\n      type: resource?.type || \"book\",\n      url: resource?.url || \"\",\n      status: resource?.status || \"not_started\",\n      progress: resource?.progress || 0,\n      startedAt: resource?.startedAt ? new Date(resource.startedAt).toISOString().split('T')[0] + 'T' + new Date(resource.startedAt).toTimeString().split(' ')[0] : undefined,\n      completedAt: resource?.completedAt ? new Date(resource.completedAt).toISOString().split('T')[0] + 'T' + new Date(resource.completedAt).toTimeString().split(' ')[0] : undefined,\n      notes: resource?.notes || \"\",\n    },\n  });\n\n  const createResourceMutation = useMutation({\n    mutationFn: async (resourceData: InsertLearningResource) => {\n      if (resource) {\n        await apiRequest(\"PUT\", `/api/learning-resources/${resource.id}`, resourceData);\n      } else {\n        await apiRequest(\"POST\", \"/api/learning-resources\", resourceData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-resources\"] });\n      toast({\n        title: \"Success\",\n        description: `Learning resource ${resource ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${resource ? 'update' : 'create'} learning resource`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertLearningResource) => {\n    setIsSubmitting(true);\n    // Auto-set startedAt if status is in_progress and not already set\n    if (data.status === \"in_progress\" && !data.startedAt) {\n      data.startedAt = new Date();\n    }\n    // Auto-set completedAt if status is completed and not already set\n    if (data.status === \"completed\" && !data.completedAt) {\n      data.completedAt = new Date();\n      data.progress = 100;\n    }\n    createResourceMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"learning-resource-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {resource ? \"Edit Learning Resource\" : \"Add Learning Resource\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Title *\n            </Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              placeholder=\"e.g. The Manager's Path\"\n              className=\"w-full\"\n              data-testid=\"input-resource-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"type\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Type *\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"type\", value as \"book\" | \"course\" | \"podcast\" | \"workshop\")} defaultValue={form.getValues(\"type\")}>\n                <SelectTrigger data-testid=\"select-resource-type\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"book\">Book</SelectItem>\n                  <SelectItem value=\"course\">Course</SelectItem>\n                  <SelectItem value=\"podcast\">Podcast</SelectItem>\n                  <SelectItem value=\"workshop\">Workshop</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"status\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Status\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"status\", value as \"not_started\" | \"in_progress\" | \"completed\")} defaultValue={form.getValues(\"status\")}>\n                <SelectTrigger data-testid=\"select-resource-status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"not_started\">Not Started</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"url\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              URL\n            </Label>\n            <Input\n              id=\"url\"\n              type=\"url\"\n              {...form.register(\"url\")}\n              placeholder=\"https://example.com/resource\"\n              className=\"w-full\"\n              data-testid=\"input-resource-url\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"progress\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Progress (0-100%)\n            </Label>\n            <Input\n              id=\"progress\"\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              {...form.register(\"progress\", { valueAsNumber: true })}\n              placeholder=\"0\"\n              className=\"w-full\"\n              data-testid=\"input-resource-progress\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"startedAt\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Started Date\n              </Label>\n              <Input\n                id=\"startedAt\"\n                type=\"datetime-local\"\n                {...form.register(\"startedAt\")}\n                className=\"w-full\"\n                data-testid=\"input-resource-started-at\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"completedAt\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Completed Date\n              </Label>\n              <Input\n                id=\"completedAt\"\n                type=\"datetime-local\"\n                {...form.register(\"completedAt\")}\n                className=\"w-full\"\n                data-testid=\"input-resource-completed-at\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Notes\n            </Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register(\"notes\")}\n              placeholder=\"Key takeaways, thoughts, or progress notes\"\n              rows={4}\n              className=\"w-full\"\n              data-testid=\"textarea-resource-notes\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-resource\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-resource\"\n            >\n              {isSubmitting ? \"Saving...\" : resource ? \"Update Resource\" : \"Add Resource\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9189},"client/src/components/forms/metric-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertKpiMetricSchema, type InsertKpiMetric } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst METRIC_TYPES = [\n  { value: \"deployment_frequency\", label: \"Deployment Frequency\", unit: \"per week\" },\n  { value: \"lead_time\", label: \"Lead Time for Changes\", unit: \"hours\" },\n  { value: \"mttr\", label: \"Mean Time to Recovery\", unit: \"minutes\" },\n  { value: \"failure_rate\", label: \"Change Failure Rate\", unit: \"%\" },\n  { value: \"team_satisfaction\", label: \"Team Satisfaction\", unit: \"/5\" },\n  { value: \"system_uptime\", label: \"System Uptime\", unit: \"%\" },\n];\n\ninterface MetricModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function MetricModal({ open, onOpenChange }: MetricModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertKpiMetric>({\n    resolver: zodResolver(insertKpiMetricSchema),\n    defaultValues: {\n      metricType: \"\",\n      value: \"\",\n      target: \"\",\n      unit: \"\",\n      notes: \"\",\n    },\n  });\n\n  const createMetricMutation = useMutation({\n    mutationFn: async (metricData: InsertKpiMetric) => {\n      await apiRequest(\"POST\", \"/api/kpi-metrics\", metricData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kpi-metrics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Metric recorded successfully\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to record metric\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertKpiMetric) => {\n    setIsSubmitting(true);\n    createMetricMutation.mutate(data);\n  };\n\n  const handleMetricTypeChange = (metricType: string) => {\n    const selectedMetric = METRIC_TYPES.find(m => m.value === metricType);\n    if (selectedMetric) {\n      form.setValue(\"metricType\", metricType);\n      form.setValue(\"unit\", selectedMetric.unit);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-lg\" data-testid=\"metric-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            Record KPI Metric\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"metricType\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Metric Type *\n            </Label>\n            <Select onValueChange={handleMetricTypeChange}>\n              <SelectTrigger data-testid=\"select-metric-type\">\n                <SelectValue placeholder=\"Select metric type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {METRIC_TYPES.map(metric => (\n                  <SelectItem key={metric.value} value={metric.value}>\n                    {metric.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.metricType && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.metricType.message}</p>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"value\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Current Value *\n              </Label>\n              <Input\n                id=\"value\"\n                {...form.register(\"value\")}\n                placeholder=\"0\"\n                className=\"w-full\"\n                data-testid=\"input-metric-value\"\n              />\n              {form.formState.errors.value && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.value.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"target\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Target Value\n              </Label>\n              <Input\n                id=\"target\"\n                {...form.register(\"target\")}\n                placeholder=\"Target\"\n                className=\"w-full\"\n                data-testid=\"input-metric-target\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"unit\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Unit\n            </Label>\n            <Input\n              id=\"unit\"\n              {...form.register(\"unit\")}\n              placeholder=\"e.g. %, hours, per week\"\n              className=\"w-full\"\n              data-testid=\"input-metric-unit\"\n              readOnly\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Notes\n            </Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register(\"notes\")}\n              placeholder=\"Additional context or observations\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-metric-notes\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-metric\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-metric\"\n            >\n              {isSubmitting ? \"Recording...\" : \"Record Metric\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6755},"client/src/components/forms/risk-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertRiskSchema, type InsertRisk, type Risk } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst RISK_CATEGORIES = [\n  \"Technical Skills Atrophy\",\n  \"Team Resistance to Change\", \n  \"Overwhelming Workload\",\n  \"Stakeholder Misalignment\",\n  \"Communication Breakdown\",\n  \"Resource Constraints\",\n  \"Timeline Pressure\",\n  \"Knowledge Gap\",\n  \"Process Failure\",\n  \"Technology Risk\",\n];\n\ninterface RiskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  risk?: Risk | null;\n}\n\nexport default function RiskModal({ open, onOpenChange, risk }: RiskModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertRisk>({\n    resolver: zodResolver(insertRiskSchema),\n    defaultValues: {\n      title: risk?.title || \"\",\n      description: risk?.description || \"\",\n      category: risk?.category || \"\",\n      probability: risk?.probability || \"medium\",\n      impact: risk?.impact || \"medium\",\n      status: risk?.status || \"active\",\n      mitigationPlan: risk?.mitigationPlan || \"\",\n      contingencyPlan: risk?.contingencyPlan || \"\",\n    },\n  });\n\n  const createRiskMutation = useMutation({\n    mutationFn: async (riskData: InsertRisk) => {\n      if (risk) {\n        await apiRequest(\"PUT\", `/api/risks/${risk.id}`, riskData);\n      } else {\n        await apiRequest(\"POST\", \"/api/risks\", riskData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/risks\"] });\n      toast({\n        title: \"Success\",\n        description: `Risk ${risk ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${risk ? 'update' : 'create'} risk`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertRisk) => {\n    setIsSubmitting(true);\n    createRiskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"risk-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {risk ? \"Edit Risk\" : \"Add New Risk\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Risk Title *\n            </Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              placeholder=\"e.g. Technical skills becoming outdated\"\n              className=\"w-full\"\n              data-testid=\"input-risk-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Description\n            </Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Detailed description of the risk and its potential consequences\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-risk-description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"category\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Category\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"category\", value)} defaultValue={form.getValues(\"category\") || undefined}>\n                <SelectTrigger data-testid=\"select-risk-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No Category</SelectItem>\n                  {RISK_CATEGORIES.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"status\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Status\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"status\", value)} defaultValue={form.getValues(\"status\")}>\n                <SelectTrigger data-testid=\"select-risk-status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"mitigated\">Mitigated</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"probability\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Probability\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"probability\", value)} defaultValue={form.getValues(\"probability\") || undefined}>\n                <SelectTrigger data-testid=\"select-risk-probability\">\n                  <SelectValue placeholder=\"Select probability\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"impact\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Impact\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"impact\", value)} defaultValue={form.getValues(\"impact\") || undefined}>\n                <SelectTrigger data-testid=\"select-risk-impact\">\n                  <SelectValue placeholder=\"Select impact\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"mitigationPlan\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Mitigation Plan\n            </Label>\n            <Textarea\n              id=\"mitigationPlan\"\n              {...form.register(\"mitigationPlan\")}\n              placeholder=\"Steps to reduce the probability or impact of this risk\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-risk-mitigation\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"contingencyPlan\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Contingency Plan\n            </Label>\n            <Textarea\n              id=\"contingencyPlan\"\n              {...form.register(\"contingencyPlan\")}\n              placeholder=\"Backup plan if the risk occurs despite mitigation efforts\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-risk-contingency\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-risk\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-risk\"\n            >\n              {isSubmitting ? \"Saving...\" : risk ? \"Update Risk\" : \"Add Risk\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9286},"client/src/components/forms/task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema, type InsertTask } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PHASE_DATA } from \"@/types\";\n\ninterface TaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task?: any; // For editing existing tasks\n}\n\nexport default function TaskModal({ open, onOpenChange, task }: TaskModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      title: task?.title || \"\",\n      description: task?.description || \"\",\n      priority: task?.priority || \"medium\",\n      status: task?.status || \"pending\",\n      phaseId: task?.phaseId || \"\",\n      dueDate: task?.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : undefined,\n      notes: task?.notes || \"\",\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: InsertTask) => {\n      await apiRequest(\"POST\", \"/api/tasks\", taskData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks/upcoming\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task created successfully\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertTask) => {\n    setIsSubmitting(true);\n    createTaskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"task-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {task ? \"Edit Task\" : \"Create New Task\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Task Title\n            </Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              placeholder=\"Enter task title\"\n              className=\"w-full\"\n              data-testid=\"input-task-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Description\n            </Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Task description\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-task-description\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"phaseId\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Phase\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"phaseId\", value)} defaultValue={form.getValues(\"phaseId\") || undefined}>\n                <SelectTrigger data-testid=\"select-task-phase\">\n                  <SelectValue placeholder=\"Select phase\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No Phase</SelectItem>\n                  {PHASE_DATA.map((phase) => (\n                    <SelectItem key={phase.id} value={phase.id}>\n                      {phase.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"priority\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Priority\n              </Label>\n              <Select onValueChange={(value) => form.setValue(\"priority\", value as \"high\" | \"medium\" | \"low\")} defaultValue={form.getValues(\"priority\")}>\n                <SelectTrigger data-testid=\"select-task-priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"dueDate\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Due Date\n            </Label>\n            <Input\n              id=\"dueDate\"\n              type=\"date\"\n              {...form.register(\"dueDate\")}\n              className=\"w-full\"\n              data-testid=\"input-task-due-date\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Notes\n            </Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register(\"notes\")}\n              placeholder=\"Additional notes\"\n              rows={2}\n              className=\"w-full\"\n              data-testid=\"textarea-task-notes\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-task\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-task\"\n            >\n              {isSubmitting ? \"Saving...\" : \"Save Task\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7122},"client/src/components/forms/team-member-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTeamMemberSchema, type InsertTeamMember, type TeamMember } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TeamMemberModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  member?: TeamMember | null;\n}\n\nexport default function TeamMemberModal({ open, onOpenChange, member }: TeamMemberModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTeamMember>({\n    resolver: zodResolver(insertTeamMemberSchema),\n    defaultValues: {\n      name: member?.name || \"\",\n      role: member?.role || \"\",\n      email: member?.email || \"\",\n      strengths: member?.strengths || \"\",\n      improvementAreas: member?.improvementAreas || \"\",\n      careerGoals: member?.careerGoals || \"\",\n      lastOneOnOneDate: member?.lastOneOnOneDate ? new Date(member.lastOneOnOneDate).toISOString().split('T')[0] : undefined,\n      nextOneOnOneDate: member?.nextOneOnOneDate ? new Date(member.nextOneOnOneDate).toISOString().split('T')[0] : undefined,\n      satisfactionScore: member?.satisfactionScore ? member.satisfactionScore.toString() : \"\",\n    },\n  });\n\n  const createMemberMutation = useMutation({\n    mutationFn: async (memberData: InsertTeamMember) => {\n      if (member) {\n        await apiRequest(\"PUT\", `/api/team-members/${member.id}`, memberData);\n      } else {\n        await apiRequest(\"POST\", \"/api/team-members\", memberData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/team-members\"] });\n      toast({\n        title: \"Success\",\n        description: `Team member ${member ? 'updated' : 'created'} successfully`,\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: `Failed to ${member ? 'update' : 'create'} team member`,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InsertTeamMember) => {\n    setIsSubmitting(true);\n    // Convert satisfaction score to number if provided\n    const processedData = {\n      ...data,\n      satisfactionScore: data.satisfactionScore ? data.satisfactionScore.toString() : null,\n    };\n    createMemberMutation.mutate(processedData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"team-member-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n            {member ? \"Edit Team Member\" : \"Add Team Member\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Name *\n              </Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                placeholder=\"Enter team member name\"\n                className=\"w-full\"\n                data-testid=\"input-member-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"role\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Role\n              </Label>\n              <Input\n                id=\"role\"\n                {...form.register(\"role\")}\n                placeholder=\"e.g. Senior Developer\"\n                className=\"w-full\"\n                data-testid=\"input-member-role\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Email\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...form.register(\"email\")}\n              placeholder=\"team.member@company.com\"\n              className=\"w-full\"\n              data-testid=\"input-member-email\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"strengths\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Strengths\n            </Label>\n            <Textarea\n              id=\"strengths\"\n              {...form.register(\"strengths\")}\n              placeholder=\"Document their key strengths and skills\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-member-strengths\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"improvementAreas\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Improvement Areas\n            </Label>\n            <Textarea\n              id=\"improvementAreas\"\n              {...form.register(\"improvementAreas\")}\n              placeholder=\"Areas for growth and development\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-member-improvement-areas\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"careerGoals\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Career Goals\n            </Label>\n            <Textarea\n              id=\"careerGoals\"\n              {...form.register(\"careerGoals\")}\n              placeholder=\"Their career aspirations and goals\"\n              rows={3}\n              className=\"w-full\"\n              data-testid=\"textarea-member-career-goals\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"lastOneOnOneDate\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Last 1:1 Date\n              </Label>\n              <Input\n                id=\"lastOneOnOneDate\"\n                type=\"date\"\n                {...form.register(\"lastOneOnOneDate\")}\n                className=\"w-full\"\n                data-testid=\"input-member-last-one-on-one\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"nextOneOnOneDate\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Next 1:1 Date\n              </Label>\n              <Input\n                id=\"nextOneOnOneDate\"\n                type=\"date\"\n                {...form.register(\"nextOneOnOneDate\")}\n                className=\"w-full\"\n                data-testid=\"input-member-next-one-on-one\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"satisfactionScore\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Satisfaction Score (1-5)\n            </Label>\n            <Input\n              id=\"satisfactionScore\"\n              type=\"number\"\n              min=\"1\"\n              max=\"5\"\n              step=\"0.1\"\n              {...form.register(\"satisfactionScore\")}\n              placeholder=\"4.2\"\n              className=\"w-full\"\n              data-testid=\"input-member-satisfaction-score\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-member\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-blue-800\"\n              data-testid=\"button-save-member\"\n            >\n              {isSubmitting ? \"Saving...\" : member ? \"Update Member\" : \"Add Member\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8576},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  actions?: React.ReactNode;\n}\n\nexport default function Header({ title, subtitle, actions }: HeaderProps) {\n\n  const handleExportReport = () => {\n    // TODO: Implement export functionality\n    console.log(\"Export report clicked\");\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-800\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-slate-600 mt-1\">{subtitle}</p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {actions}\n          \n          {!actions && (\n            <Button \n              onClick={handleExportReport}\n              className=\"bg-primary text-white hover:bg-blue-800 transition-colors\"\n              data-testid=\"button-export-report\"\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              Export Report\n            </Button>\n          )}\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center\" data-testid=\"avatar-placeholder\">\n              <i className=\"fas fa-user text-slate-600\"></i>\n            </div>\n            <span className=\"text-slate-700 font-medium\" data-testid=\"text-username\">\n              Demo User\n            </span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1643},"client/src/components/layout/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { NavigationSection } from \"@/types\";\n\nconst navigationSections: NavigationSection[] = [\n  {\n    title: \"Overview\",\n    items: [\n      { href: \"/\", icon: \"fas fa-chart-pie\", label: \"Dashboard\" },\n      { href: \"/timeline\", icon: \"fas fa-calendar-alt\", label: \"Timeline\" },\n    ],\n  },\n  {\n    title: \"Phases\",\n    items: [\n      { href: \"/timeline?phase=1\", icon: \"fas fa-foundation\", label: \"Phase 1: Foundation\" },\n      { href: \"/timeline?phase=2\", icon: \"fas fa-users\", label: \"Phase 2: Development\" },\n      { href: \"/timeline?phase=3\", icon: \"fas fa-trophy\", label: \"Phase 3: Excellence\" },\n    ],\n  },\n  {\n    title: \"Tracking\",\n    items: [\n      { href: \"/tasks\", icon: \"fas fa-tasks\", label: \"Tasks & Goals\" },\n      { href: \"/team\", icon: \"fas fa-user-friends\", label: \"Team Assessment\" },\n      { href: \"/learning\", icon: \"fas fa-book\", label: \"Learning Resources\" },\n      { href: \"/metrics\", icon: \"fas fa-chart-line\", label: \"KPI Metrics\" },\n    ],\n  },\n  {\n    title: \"Tools\",\n    items: [\n      { href: \"/assessment\", icon: \"fas fa-clipboard-check\", label: \"Self-Assessment\" },\n      { href: \"/risks\", icon: \"fas fa-exclamation-triangle\", label: \"Risk Mitigation\" },\n      { href: \"/followups\", icon: \"fas fa-tasks\", label: \"Follow-up Tracker\" },\n      { href: \"/checklists\", icon: \"fas fa-list-check\", label: \"Checklists\" },\n    ],\n  },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Check screen size and set default collapsed state for devices < 8 inches (576px)\n  useEffect(() => {\n    const checkScreenSize = () => {\n      const isMobileDevice = window.innerWidth < 576; // 8 inches ≈ 576px\n      setIsMobile(isMobileDevice);\n      \n      // Auto-collapse on mobile devices by default\n      if (isMobileDevice && !isCollapsed) {\n        setIsCollapsed(true);\n      }\n    };\n\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    return () => window.removeEventListener('resize', checkScreenSize);\n  }, []);\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isMobile && !isCollapsed && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={() => setIsCollapsed(true)}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <div \n        className={cn(\n          \"bg-white shadow-lg min-h-screen transition-all duration-300 ease-in-out z-50\",\n          isMobile ? \"fixed left-0 top-0\" : \"relative\",\n          isCollapsed \n            ? isMobile \n              ? \"-translate-x-full\" \n              : \"w-16\" \n            : \"w-64\"\n        )} \n        data-testid=\"sidebar\"\n      >\n        {/* Header */}\n        <div className={cn(\n          \"border-b border-slate-200 flex items-center justify-between\",\n          isCollapsed ? \"p-3\" : \"p-6\"\n        )}>\n          {!isCollapsed && (\n            <div>\n              <h1 className=\"text-xl font-bold text-slate-800\">Leadership Transition</h1>\n              <p className=\"text-sm text-slate-600 mt-1\">90-Day Development Plan</p>\n            </div>\n          )}\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className={cn(\n              \"text-slate-600 hover:text-slate-800 hover:bg-slate-100\",\n              isCollapsed ? \"w-full justify-center\" : \"\"\n            )}\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <i className={cn(\n              \"fas text-lg\",\n              isCollapsed ? \"fa-chevron-right\" : \"fa-chevron-left\"\n            )}></i>\n          </Button>\n        </div>\n        \n        {/* Navigation */}\n        <nav className=\"mt-6\">\n          <div className={cn(\"px-4\", isCollapsed && \"px-2\")}>\n            {navigationSections.map((section) => (\n              <div key={section.title} className=\"mb-4\">\n                {!isCollapsed && (\n                  <h3 className=\"text-xs font-semibold text-slate-500 uppercase tracking-wider mb-2\">\n                    {section.title}\n                  </h3>\n                )}\n                {section.items.map((item) => {\n                  const isActive = location === item.href || \n                    (item.href === \"/\" && location === \"/\");\n                  \n                  return (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      className={cn(\n                        \"flex items-center rounded-lg mt-1 transition-colors relative group\",\n                        isCollapsed ? \"px-3 py-3 justify-center\" : \"px-3 py-2\",\n                        isActive\n                          ? \"text-slate-700 bg-blue-50 border-l-4 border-primary\"\n                          : \"text-slate-600 hover:text-slate-700 hover:bg-slate-50\"\n                      )}\n                      onClick={() => isMobile && setIsCollapsed(true)}\n                      data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <i className={cn(\n                        item.icon, \n                        isCollapsed ? \"text-lg\" : \"mr-3\", \n                        isActive ? \"text-primary\" : \"\"\n                      )}></i>\n                      \n                      {!isCollapsed && item.label}\n                      \n                      {/* Tooltip for collapsed state */}\n                      {isCollapsed && (\n                        <div className=\"absolute left-full ml-2 px-2 py-1 bg-slate-800 text-white text-sm rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-50 pointer-events-none\">\n                          {item.label}\n                        </div>\n                      )}\n                    </Link>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </nav>\n      </div>\n\n      {/* Toggle button for mobile when collapsed */}\n      {isMobile && isCollapsed && (\n        <Button\n          onClick={toggleSidebar}\n          className=\"fixed top-4 left-4 z-50 bg-primary hover:bg-blue-800 text-white shadow-lg\"\n          size=\"sm\"\n          data-testid=\"button-open-mobile-sidebar\"\n        >\n          <i className=\"fas fa-bars\"></i>\n        </Button>\n      )}\n    </>\n  );\n}\n","size_bytes":6639},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}